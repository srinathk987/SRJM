@{
    //ViewBag.Title = "GRN";
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}
<div ng-controller="GrnController" ng-init="Vendors();ProductConversionValues();DatepickerEnableStatus();">
    <div class="page-content">
        <div class="row">
            <div class="col-xs-12 col-sm-12">
                <!-- PAGE CONTENT BEGINS -->
                <form class="form-horizontal" role="form" name="Grnfrm" novalidate>
                    <div class="form-group">
                        <label class="col-sm-2 control-label">
                            GRN Type<span style="color: Red">*</span>:
                        </label>
                        <div class="col-sm-4">
                            <select id="grntype" ng-model="GR.grntype" class=" form-control" name="grntype" required ng-change="grntypeChange();">
                                <option value="">Select GRN Type</option>
                                <option value="DIRECT">DIRECT</option>
                                @*<option value="PO">PO</option>*@
                                <option value="MODIFY">MODIFY</option>
                                <option value="REORDER">REORDER</option>
                            </select>
                            <span class="error" ng-show="(Grnfrm.grntype.$dirty || submitted ) && Grnfrm.grntype.$error.required">
                                GRN Type Required!
                            </span>
                        </div>
                        <label class="col-sm-2 control-label">
                            Date <span style="color: Red">*</span>:
                        </label>
                        <div class="col-sm-4">
                            <input type="text" name="Date" ng-model="GR.grndate" placeholder="Enter Date" data-date-format="dd/mm/yyyy"
                                   class="form-control" id="Date" required ng-disabled="DateEnableStatus" />
                            <span class="error" ng-show="(Grnfrm.Date.$dirty || submitted) && Grnfrm.Date.$error.required">
                                Date Required!
                            </span>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-2 control-label">
                            Vendor Name<span style="color: Red">*</span>:
                        </label>
                        <div class="col-sm-4">
                            <select id="vendorid" ng-model="GR.vendorid" class="Search-Select form-control" style="width:345px;height:22px;" name="vendorid" ng-options="v.vendorid as v.vchvendorname for v in Vendornames" required ng-change="VendorChange();">
                                <option value="" selected>Select Vendor Name</option>
                            </select>
                            <span class="error" ng-show="(Grnfrm.vendorid.$dirty || submitted ) && Grnfrm.vendorid.$error.required">
                                Vendor Name Required!
                            </span>
                        </div>
                        <div style="display:none">
                            <label class="col-sm-2 control-label" ng-show="poShow">
                                PO No.<span style="color: Red">*</span>:
                            </label>
                        </div>
                        <div class="col-sm-4" ng-show="poShow">
                            <select id="poid" ng-model="GR.poid" class=" form-control" name="poid" ng-options="c.poid as c.pono for c in ponumbers"
                                    ng-required="poShow" ng-change="pochange();">
                                <option value="">Select PO No.</option>
                            </select>
                            <span class="error" ng-show="(Grnfrm.poid.$dirty || submitted ) && Grnfrm.poid.$error.required">
                                PO No. Required!
                            </span>
                        </div>
                    </div>

                    <div ng-if="GR.grntype === 'MODIFY'||GR.grntype === 'REORDER'">

                        <div class="form-group">
                            <label class="col-sm-2 control-label">
                                GRN No.<span style="color: Red">*</span>:
                            </label>
                            <div class="col-sm-4">
                                <select id="GRNNO" ng-model="GR.GRNNO" class=" form-control" name="GRNNO" ng-options="d.vchgrnno as d.vchgrnno for d in GRNnumbers" required ng-change="GrnChange()">
                                    <option value="">Select GRN No.</option>
                                </select>
                                <span class="error" ng-show="(Grnfrm.GRNNO.$dirty || submitted ) && Grnfrm.GRNNO.$error.required">
                                    GRN No. Required!
                                </span>
                            </div>
                        </div>
                    </div>
                    <div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">
                                Invoice No.<span style="color: Red"></span>:
                            </label>
                            <div class="col-sm-4">
                                <input type="text" name="invoiceno" ng-model="GR.invoiceno" placeholder="Enter Invoice No."
                                       class="form-control" id="invoiceno" />
                                @*<span class="error" ng-show="(Grnfrm.invoiceno.$dirty || submitted ) && Grnfrm.invoiceno.$error.required">
                                        Invoice No. Required!
                                    </span>*@
                            </div>
                            <label class="col-sm-2 control-label">
                                Invoice Date<span style="color: Red"></span>:
                            </label>
                            <div class="col-sm-4">
                                <input type="text" name="invoicedate" ng-model="GR.invoicedate" placeholder="Enter Date" data-date-format="dd/mm/yyyy" required
                                       class="form-control datepicker" id="invoicedate" />
                                <span class="error" ng-show="(Grnfrm.invoicedate.$dirty || submitted ) && Grnfrm.invoicedate.$error.required">
                                    Invoice Date Required!
                                </span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2">
                                Received By<span style="color: Red">*</span>:
                            </label>
                            <div class="col-sm-4">
                                <select id="receivedby" ng-model="GR.receivedid" class=" form-control" name="receivedby" ng-options="c.recordid as c.empname for c in Employees"
                                        required>
                                    <option value="">Select Received By</option>
                                </select>
                                <span class="error" ng-show="(Grnfrm.receivedby.$dirty || submitted ) && Grnfrm.receivedby.$error.required">
                                    Received By Required!
                                </span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2">
                                Remarks<span style="color: Red"></span>:
                            </label>
                            <div class="col-sm-4">
                                <textarea id="TermsandConditions" placeholder="Enter Remarks" class="col-xs-12"
                                          style="resize:none" ng-model="GR.TermsandConditions" rows="3" name="TermsandConditions"></textarea>
                                @*<input id="TermsandConditions" ng-model="GR.TermsandConditions" class=" form-control" name="TermsandConditions" placeholder="Enter Remarks" required>*@
                                @*<span class="error" ng-show="(Grnfrm.TermsandConditions.$dirty || submitted ) && Grnfrm.TermsandConditions.$error.required">
                                        Remarks Required!
                                    </span>*@
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="widget-box" ng-show="directShow">
            <form class="form-horizontal" role="form" name="GrnDirectfrm">
                <div class="widget-header widget-header-flat widget-header-small">
                    <h5 class="widget-title"> <i class="ace-icon fa fa-credit-card"></i> PRODUCT DETAILS </h5>
                    <div class="widget-toolbar">
                        <a href="#" data-action="collapse">
                            <i class="ace-icon fa fa-chevron-up"></i>
                        </a>
                    </div>
                </div>
                <div class="widget-body">
                    <div class="widget-main">
                        <div class="form-group">
                            <div class="col-sm-12">
                                <div class="form-group">
                                    <label class="col-sm-2 control-label" for="form-field-1">Product<span style="color: Red">*</span>:</label>
                                    <div class="col-sm-8">
                                        @*<select id="productid" class=" form-control" name="productid" ng-model="GD.productid" ng-change="productChange();" ng-options="c.productid as c.productname for c in products"
                                                    required>
                                                <option value="">Select Product</option>
                                            </select>*@
                                        <select id="productid" class="Search-Select form-control" name="productid" ng-model="GD.productid" ng-change="productChange();" ng-options="c.productid as c.productname for c in products"
                                                required style="text-decoration: none;width: 600px;height: 22px;">
                                            <option value="">Select Product</option>
                                        </select>
                                        <span class="error" ng-show="(GrnDirectfrm.productid.$dirty || submittedAdd) && GrnDirectfrm.productid.$error.required">
                                            Product Required!
                                        </span>


                                    </div>

                                    <div class="col-sm-2">
                                        <span class="add-btn-popup" onclick="POAddProducts()"><i class="fa fa-plus"></i></span>
                                    </div>
                                </div>

                            </div>
                            <div class="col-sm-12">
                                <div class="form-group">
                                    <fieldset class="scheduler-border">
                                        @*<legend class="scheduler-border">Prodcuts</legend>*@
                                        <label class="col-sm-2  padding-0 control-label" for="form-field-1">Product Code :</label>
                                        <label class="col-sm-2 padding-0 control-label" for="form-field-1" id="lblproductcode" ng-model="GD.productcode">{{lblproductcode}}</label>
                                        <label class="col-sm-2 padding-0 control-label" for="form-field-1">Category :</label>
                                        <label class="col-sm-2 padding-0 control-label" ng-model="GD.categoryname" for="form-field-1" id="lblCategory">{{lblCategory}}</label>
                                        <label class="col-sm-2 padding-0 control-label" for="form-field-1">Subcategory :</label>
                                        <label class="col-sm-2  padding-0 control-label" for="form-field-1" ng-model="GD.subcategoryname" id="lblsubcategory">{{lblSubCategoryname}}</label>
                                    </fieldset>
                                </div>
                                <div class="form-group">
                                    <fieldset class="scheduler-border">
                                        @*<legend class="scheduler-border">Prodcuts</legend>*@
                                        <label class="col-sm-2 control-label" for="form-field-1">UOM :</label>
                                        <label class="col-sm-2 control-label" for="form-field-1" ng-model="GD.orderuom" id="orderuom">{{lblorderuom}}</label>
                                        <div style="display:none">
                                            <label class="col-sm-2 control-label" for="form-field-1">Received UOM<span style="color: Red;display:none">*</span>:</label>
                                            <div class="col-sm-2" style="display:none">
                                                <select class=" form-control" name="UOM" id="UOM" ng-model="GD.grnuom" ng-change="grnuomChange();" ng-options=" c.uomid as c.uom for c in uoms" required>
                                                    <option value="">{{GD.grnuom}}</option>
                                                </select>
                                                <span class="error" ng-show="(GrnDirectfrm.UOM.$dirty || submittedAdd) && GrnDirectfrm.UOM.$error.required">
                                                    UOM Required!
                                                </span>
                                            </div>
                                            <label class="col-sm-2 control-label" for="form-field-1">Conversion Value<span style="color: Red;display:none">*</span>:</label>
                                            <div class="col-sm-2" style="display:none">
                                                @*<input kit-conversionvalue maxlength="10" name="uomconversionvalue" id="uomconversionvalue" placeholder="Enter Conversion Value" class="form-control" type="text" ng-model="GD.uomconversionvalue" required ng-disabled="hduomconversionvalue">*@
                                                <select name="uomconversionvalue" id="uomconversionvalue" ng-model="GD.uomconversionvalue" class="form-control" required ng-disabled="hduomconversionvalue">
                                                    <option value="" selected>{{GD.uomconversionvalue}}</option>
                                                    @*
                                                        <option value="1">1</option>*@
                                                </select>
                                                @*<span class="add-btn-popup" onclick="POGridConversionValue('')"><i class="fa fa-plus"></i></span>
                                                    <span class="error" ng-show="(GrnDirectfrm.uomconversionvalue.$dirty || submittedAdd) && GrnDirectfrm.uomconversionvalue.$error.required">
                                                        Conversion Value Required!
                                                    </span>*@
                                            </div>
                                        </div>
                                    </fieldset>
                                </div>
                                <div class="form-group" id="divself">
                                    <fieldset class="scheduler-border">
                                        <label class="col-sm-2 control-label" for="form-field-1">Approved Qty.<span style="color: Red">*</span>:</label>
                                        <div class="col-sm-2">
                                            <input kit-quantity maxlength="10" name="receivedqty" id="receivedqty" placeholder="Enter Approved Qty" class="form-control" type="text" ng-model="GD.receivedqty" ng-keyup="ProductAmountcalculate()" required>
                                            <span class="error" ng-show="(GrnDirectfrm.receivedqty.$dirty || submittedAdd) && GrnDirectfrm.receivedqty.$error.required">
                                                Approved Quantity Required!
                                            </span>
                                        </div>
                                        <div style="display:none">
                                            <label class="col-sm-2 control-label" for="form-field-1">Return Qty.:</label>
                                            <div class="col-sm-2">
                                                <input kit-quantity maxlength="10" name="returnqty" id="returnqty" placeholder="Enter Return Qty" class="form-control" type="text" ng-model="GD.returnqty">
                                                <span class="error" ng-show="(GrnDirectfrm.returnqty.$dirty || submittedAdd) && GrnDirectfrm.returnqty.$error.required">
                                                    Return Quantity Required!
                                                </span>
                                            </div>
                                        </div>
                                        <label class="col-sm-2 control-label" for="form-field-1">Rate<span style="color: Red">*</span>:</label>
                                        <div class="col-sm-2">
                                            <input kit-amount maxlength="10" name="grnrate" id="grnrate" style="text-align:right" placeholder="Enter Rate" class="form-control" type="text" ng-model="GD.grnrate" ng-keyup="ProductAmountcalculate()" required>
                                            <span class="error" ng-show="(GrnDirectfrm.grnrate.$dirty || submittedAdd) && GrnDirectfrm.grnrate.$error.required">
                                                Rate Required!
                                            </span>
                                        </div>
                                    </fieldset>
                                </div>
                                <div class="form-group">
                                    <fieldset class="scheduler-border">
                                        @*<legend class="scheduler-border">Prodcuts</legend>*@
                                        <div style="display:none">
                                            <label class="col-sm-2 control-label" for="form-field-1">Storage Area<span style="color: Red">*</span>:</label>
                                            <div class="col-sm-2">
                                                <select class=" form-control" name="storagelocationid" id="storagelocationid" ng-model="GD.storagelocationid" ng-options="c.storagelocationid as c.storagelocationname for c in storageareas" required ng-change="storageareaChange();">
                                                    <option value="">Select Storage Area</option>
                                                </select>
                                                <span class="error" ng-show="(GrnDirectfrm.storagelocationid.$dirty || submittedAdd) && GrnDirectfrm.storagelocationid.$error.required">
                                                    Storage Location Required!
                                                </span>
                                            </div>
                                            <label class="col-sm-2 control-label" for="form-field-1">Shelf Name :</label>
                                            <div class="col-sm-2">
                                                <select class=" form-control" name="shelfid" id="shelfid" ng-model="GD.shelfid" ng-options="c.shelfid as c.shelfname for c in shelfnames">
                                                    <option value="">Select Shelf Name</option>
                                                </select>
                                                <span class="error" ng-show="(GrnDirectfrm.shelfid.$dirty || submittedAdd) && GrnDirectfrm.shelfid.$error.required">
                                                    Shelf Name Required!
                                                </span>

                                            </div>
                                        </div>
                                        <label class="col-sm-2 control-label no-padding-right" for="form-field-1">
                                            Amount @*<span style="color: Red">*</span>*@ :
                                        </label>
                                        <div class="col-sm-2">
                                            <input type="text" id="productamount" class="form-control" ng-model="GD.productamount" disabled style="text-align:right" />
                                        </div>
                                        @*<label class="col-sm-2 control-label" for="form-field-1">Available Qty. :</label>
                                            <label class="col-sm-2 control-label" for="form-field-1" ng-model="GD.AvailableQty">{{lblavailabilty}}</label>*@
                                    </fieldset>
                                    <fieldset class="scheduler-border" style="display:none">
                                        <div class="form-group">

                                            <label class="col-sm-2 control-label">
                                                Discount Type :
                                            </label>
                                            <div class="col-sm-2">
                                                <select id="taxtype" ng-model="GD.ProductDiscountType" class=" form-control" name="ProductDiscounttype" ng-change="ProductdiscounttypeChange();">
                                                    <option value="">SELECT</option>
                                                    <option value="FLAT">FLAT</option>
                                                    <option value="PERCENTAGE">PERCENTAGE</option>
                                                </select>
                                                @*<input type="checkbox" id="Discounttype" class="checkbox" ng-model="TX.DiscountType" ng-checked="discounttypeChange()" placeholder="Enter Discount Percentage" />*@
                                            </div>
                                            <label class="col-sm-2 control-label">
                                                Discount :
                                            </label>
                                            <div class="col-sm-2">
                                                <input type="text" name="DiscountFlatPercentage" ng-model="GD.ProductDiscountFlatPercentage" placeholder="Enter Discount" ng-keyup="ProductDiscountFlatPercentageChange($event, GD.ProductDiscountFlatPercentage)"
                                                       class="form-control" id="ProductDiscountFlatPercentage" ng-required="Producthddiscount" ng-disabled="!Producthddiscount" kit-amount maxlength="10" ng-change="ProductDiscountCalculations()" />@*ng-blur="DiscountCalculations();"*@
                                                    <span class="error" ng-show="(GrnDirectfrm.ProductDiscountFlatPercentage.$dirty || submittedAdd) && GrnDirectfrm.ProductDiscountFlatPercentage.$error.required">
                                                        Discount Required!
                                                    </span>
                                                </div>



                                                <label class="col-sm-2 control-label">
                                                    Discount Value :
                                                </label>
                                                <div class="col-sm-2">
                                                    <input type="text" id="DiscountValue" class="form-control" ng-model="GD.ProductDiscountValue" ng-required="Producthdtaxdiscountper" style="text-align:right" disabled maxlength="10" />
                                                    @*<input type="checkbox" id="Discounttype" class="checkbox" ng-model="TX.DiscountType" ng-checked="discounttypeChange()" placeholder="Enter Discount Percentage" />*@
                                                </div>

                                            </div>
                                            <div class="form-group" style="display:none">


                                                <label class="col-sm-2 control-label">
                                                    Tax Input Credit On :
                                                </label>
                                                <div class="col-sm-2">
                                                    <select id="taxtype" ng-model="GD.taxtype" class=" form-control" name="taxtype" ng-change="taxtypeChange();">
                                                        <option value="" selected>NONE</option>
                                                        <option value="EXCISE">EXCISE</option>
                                                        <option value="VAT">VAT</option>
                                                        <option value="BOTH">BOTH</option>
                                                    </select>
                                                    <span class="error" ng-show="(GrnDirectfrm.taxtype.$dirty || submittedAdd ) && GrnDirectfrm.taxtype.$error.required">
                                                        Tax Type Required!
                                                    </span>
                                                </div>
                                            </div>
                                            <div class="form-group" ng-show="hdEXCISE">
                                                <fieldset class="widget-box">
                                                    <div class="widget-header widget-header-flat widget-header-small">
                                                        <h5 class="widget-title"> <i class="ace-icon fa fa-credit-card"></i>EXCISE DETAILS </h5>

                                                    </div>
                                                    <div class="widget-body">
                                                        <div class="widget-main">
                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label">
                                                                    Excise Duty% :
                                                                </label>
                                                                <div class="col-sm-4">

                                                                    <select id="TaxExcisePercentage" ng-model="GD.TaxExcisePercentage" class=" form-control" name="TaxExcisePercentage" ng-required="hdEXCISE" ng-change="ProductExiseCalculations()">
                                                                        <option value="">Select</option>
                                                                        <option value="2">2 </option>
                                                                        <option value="12">12</option>
                                                                        <option value="12.5">12.5</option>
                                                                        <option value="14">14</option>
                                                                        <option value="14.5">14.5</option>
                                                                        <option value="15">15</option>
                                                                    </select>
                                                                    <span class="error" ng-show="(GrnDirectfrm.TaxExcisePercentage.$dirty || submittedAdd ) && GrnDirectfrm.TaxExcisePercentage.$error.required">
                                                                        Tax Excise Percentage Required!
                                                                    </span>
                                                                </div>
                                                                <label class="col-sm-2 control-label ">
                                                                    Excise Duty :
                                                                </label>
                                                                <div class="col-sm-4">
                                                                    <input type="text" id="TaxExciseAmount" class="form-control" style="text-align:right" ng-model="GD.TaxExciseAmount" disabled />
                                                                </div>
                                                            </div>
                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label ">
                                                                    CESS% :
                                                                </label>
                                                                <div class="col-sm-4">
                                                                    <select id="TaxCESSPercentage" ng-model="GD.TaxCESSPercentage" class=" form-control" name="TaxCESSPercentage" ng-required="hdEXCISE" ng-change="ProductExiseCalculations()">
                                                                        <option value="">Select</option>
                                                                        <option value="0">0 </option>
                                                                        <option value="2">2</option>
                                                                    </select>
                                                                    <span class="error" ng-show="(GrnDirectfrm.TaxCESSPercentage.$dirty || submittedAdd ) && GrnDirectfrm.TaxCESSPercentage.$error.required">
                                                                        Tax CESS Percentage Required!
                                                                    </span>
                                                                    @*<input type="text" id="TaxCESSPercentage" class="form-control" ng-model="TX.TaxCESSPercentage" ng-required="hdtaxtypeexcise" />*@
                                                                </div>
                                                                <label class="col-sm-2 control-label ">
                                                                    CESS Value :
                                                                </label>
                                                                <div class="col-sm-4">
                                                                    <input type="text" id="TaxCESSAmount" class="form-control" style="text-align:right" ng-model="GD.TaxCESSAmount" disabled />
                                                                </div>
                                                            </div>
                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label ">
                                                                    SHCESS% :
                                                                </label>
                                                                <div class="col-sm-4">
                                                                    @*<input type="text" id="TaxSHCESSPercentage" class="form-control" ng-model="TX.TaxSHCESSPercentage" ng-required="hdtaxtypeexcise" />*@
                                                                    <select id="TaxSHCESSPercentage" ng-model="GD.TaxSHCESSPercentage" class=" form-control" name="TaxSHCESSPercentage" ng-required="hdEXCISE" ng-change="ProductExiseCalculations()">
                                                                        <option value="">Select</option>
                                                                        <option value="0">0 </option>
                                                                        <option value="1">1</option>
                                                                    </select>
                                                                    <span class="error" ng-show="(GrnDirectfrm.TaxCESSPercentage.$dirty || submittedAdd ) && GrnDirectfrm.TaxCESSPercentage.$error.required">
                                                                        Tax SHCESS Percentage Required!
                                                                    </span>
                                                                </div>
                                                                <label class="col-sm-2 control-label no-padding-right">
                                                                    SHCESS Value :
                                                                </label>
                                                                <div class="col-sm-4">
                                                                    <input type="text" id="TaxSHCESSAmount" class="form-control" style="text-align:right" ng-model="GD.TaxSHCESSAmount" disabled />
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </fieldset>
                                            </div>
                                            <div class="form-group" ng-show="hdVATCST">
                                                <fieldset class="widget-box">
                                                    <div class="widget-header widget-header-flat widget-header-small">
                                                        <h5 class="widget-title"> <i class="ace-icon fa fa-credit-card"></i>TAXATION DETAILS </h5>

                                                    </div>
                                                    <div class="widget-body">
                                                        <div class="widget-main">
                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label">
                                                                    Tax Type :
                                                                </label>
                                                                <div class="col-sm-4">
                                                                    <select id="vatorcst" ng-model="GD.vatorcst" class=" form-control" name="vatorcst" ng-required="hdVATCST" ng-change="vatorcstChange()">
                                                                        <option value="" selected>Select</option>
                                                                        <option value="VAT">VAT</option>
                                                                        <option value="CST">CST</option>
                                                                    </select>
                                                                    <span class="error" ng-show="(GrnDirectfrm.vatorcst.$dirty || submittedAdd ) && GrnDirectfrm.vatorcst.$error.required">
                                                                        Vat or Cst Type Required!
                                                                    </span>
                                                                </div>
                                                            </div>
                                                            <div class="form-group">
                                                                <label class="col-sm-2 control-label">
                                                                    VAT/CST % :
                                                                </label>
                                                                <div class="col-sm-4">
                                                                    <select id="taxvatcst" ng-model="GD.taxvatcst" class=" form-control" name="taxvatcst" ng-required="hdVATCST" ng-options="percentage for percentage in Percentages" ng-change="productVatorCstCalculations();">
                                                                        <option value="" selected>SELECT</option>
                                                                    </select>
                                                                </div>
                                                                <label class="col-sm-2 control-label">
                                                                    VAT/CST Value :
                                                                </label>
                                                                <div class="col-sm-4">
                                                                    <input type="text" id="taxvatorcsttotal" class="form-control" ng-model="GD.TaxvatorcstAmount" style="text-align:right" disabled />
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </fieldset>
                                            </div>
                                        </fieldset>
                                    </div>
                                    <div class="pull-right">
                                        <button class="btn btn-success" type="button" ng-click="AddProduct(GD)"><i class="ace-icon fa fa-save bigger-110"></i>Add</button>
                                        <button class="btn orange" type="reset" ng-click="ResetDirectGRN();">
                                            <i class="ace-icon fa fa-undo bigger-110"></i>Clear
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div>
                <div ng-show="!directShow">
                    <table id="grdgrnpo"></table>
                    @*<div id="gridpo-pager">
                        </div>*@
                </div>
                <div ng-show="directShow">
                    <table id="grdgrndirect"></table>
                    @*<div id="griddirect-pager">
                        </div>*@
                </div>
            </div>

            <div class="clearfix"></div>
            <br />
            <div class="row">
                <div class="col-xs-12 col-sm-12">
                    <form class="form-horizontal" role="form" name="frmtx" novalidate>

                        <div class="form-group">
                            <label class="col-sm-2 control-label">
                                Basic Amount :
                            </label>
                            <div class="col-sm-4 ">
                                <input type="text" id="BasicAmount" class="form-control" ng-model="TX.BasicAmount" style="text-align:right" disabled />
                            </div>

                            <label class="col-sm-2 control-label">
                                Discount Type :
                            </label>
                            <div class="col-sm-4">
                                <select id="taxtype" ng-model="TX.DiscountType" class=" form-control" name="Discounttype" ng-change="discounttypeChange();">
                                    <option value="">SELECT</option>
                                    <option value="FLAT">FLAT</option>
                                    <option value="PERCENTAGE">PERCENTAGE</option>
                                </select>

                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">
                                Discount :
                            </label>
                            <div class="col-sm-4">
                                <input type="text" name="DiscountFlatPercentage" ng-model="TX.DiscountFlatPercentage" placeholder="Enter Discount" ng-keyup="DiscountFlatPercentageChange($event, TX.DiscountFlatPercentage)"
       class="form-control" id="flat" ng-required="hddiscount" kit-digits maxlength="10" ng-disabled="ischange" />@*ng-blur="DiscountCalculations();"*@
                                    <span class="error" ng-show="(frmtx.DiscountFlatPercentage.$dirty || isTaxSubmitted) && frmtx.DiscountFlatPercentage.$error.required">
                                        Discount Required!
                                    </span>
                                </div>
                                <label class="col-sm-2 control-label">
                                    Discount Value :
                                </label>
                                <div class="col-sm-4">
                                    <input type="text" id="DiscountValue" class="form-control" ng-model="TX.DiscountValue" style="text-align:right" ng-required="hdtaxdiscountper" disabled maxlength="10" />

                                </div>

                            </div>


                            <div class="form-group" style="display:none">
                                <label class="col-sm-2 control-label">
                                    Total VAT/CST :
                                </label>
                                <div class="col-sm-4">
                                    <input type="text" name="totalvatorcst" class="form-control" ng-model="TX.totalvatorcst" style="text-align:right" disabled />
                                </div>
                                <label class="col-sm-2 control-label">
                                    Total Exice :
                                </label>
                                <div class="col-sm-4">
                                    <input type="text" id="totalexcise" class="form-control" ng-model="TX.totalexcise" style="text-align:right" disabled maxlength="10" />
                                </div>

                            </div>



                            <div class="form-group" style="display:none">
                                <label class="col-sm-2 control-label">
                                    Total CESS :
                                </label>
                                <div class="col-sm-4">
                                    <input type="text" name="totalcess" class="form-control" ng-model="TX.totalcess" style="text-align:right" disabled />
                                </div>
                                <label class="col-sm-2 control-label">
                                    Total SHCESS :
                                </label>
                                <div class="col-sm-4">
                                    <input type="text" id="totalshcess" class="form-control" ng-model="TX.totalshcess" style="text-align:right" disabled maxlength="10" />
                                    <input type="text" id="totalproductdiscount" ng-model="TX.totalproductdiscount" hidden style="text-align:right" />
                                </div>

                            </div>


                            <div class="form-group">
                                <label class="col-sm-2 control-label">
                                    Transport Charges :
                                </label>
                                <div class="col-sm-4">
                                    <input type="text" id="TransportCharges" class="form-control" kit-amount maxlength="10" style="text-align:right" ng-model="TX.TransportCharges" ng-change="TotalCalculations()" />
                                </div>

                                <label class="col-sm-2 control-label">
                                    Total Amount :
                                </label>
                                <div class="col-sm-4 pull-right">
                                    <input type="text" id="TotalAmount" class="form-control" ng-model="TX.TotalAmount" style="text-align:right" disabled />
                                    <span class="error" ng-show="(frmtx.TotalAmount.$dirty || isTaxSubmitted ) && frmtx.TotalAmount.$error.required">
                                        Total Amount Required!
                                    </span>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="pull-right">
                                    <button class="btn btn-success" type="button" ng-click="SaveGrn(GR)">
                                        <i class="ace-icon fa fa-plus bigger-110"></i>{{btnSave}}
                                    </button>
                                    &nbsp; &nbsp; &nbsp;
                                    <button class="btn orange" ng-click="Reset()" id="Reset" type="button">
                                        <i class="ace-icon fa fa-undo bigger-110"></i>Reset
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

        </div>
        @*MODEL POP UP FOR UOON CONVERSION VALUE*@
        <i class="fa fa-edit right bigger-125" data-toggle="modal" data-target="#myModal" id="uomConversionValuePopUp" style="display:block;visibility:hidden"></i>
        <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header" style="background: #FFEB3B">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <h4 class="modal-title" id="myModalLabel">Conversion Value<i class="fa  fa-hand-o-down animated bounce"></i></h4>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-xs-12">
                                <div class="form-group">
                                    <div class="widget-box">
                                        <div class="widget-body" style="display: block;">
                                            <div class="widget-main">
                                                <form class="form-horizontal" role="form" name="frConversionValue" novalidate style="border:inherit;border-bottom-width:1px;">
                                                    <div class="form-group" hidden>
                                                        <label class="col-sm-5 control-label">
                                                            Product Name<span style="color: Red">*</span>:
                                                        </label>
                                                        <div class="col-sm-5">
                                                            <input type="text" name="ConversionValueRowID" class="form-control" id="ConversionValueRowID" />
                                                        </div>
                                                    </div>
                                                    <div class="form-group">
                                                        <label class="col-sm-5 control-label">
                                                            Product Name<span style="color: Red">*</span>:
                                                        </label>
                                                        <div class="col-sm-5">
                                                            <input type="text" name="ConversionValueProductname" class="form-control" id="ConversionValueProductname" disabled />
                                                        </div>
                                                    </div>
                                                    <div class="form-group">
                                                        <label class="col-sm-5 control-label">
                                                            Product UOM<span style="color: Red">*</span>:
                                                        </label>
                                                        <div class="col-sm-5">
                                                            <input type="text" name="ConversionValueProductUOM" class="form-control" id="ConversionValueProductUOM" disabled />
                                                        </div>
                                                    </div>
                                                    <div class="form-group">
                                                        <label class="col-sm-5 control-label">
                                                            GRN UOM <span style="color: Red">*</span>:
                                                        </label>
                                                        <div class="col-sm-5">
                                                            <input type="text" name="ConversionValueGRNUOM" class="form-control" id="ConversionValueGRNUOM" disabled />
                                                        </div>
                                                    </div>
                                                    <div class="form-group">
                                                        <label class="col-sm-5 control-label">
                                                            Conversion Value <span style="color: Red">*</span>:
                                                        </label>
                                                        <div class="col-sm-5">
                                                            <input type="text" name="MainConversionValue" class="form-control" id="MainConversionValue" pattern="[1-9][0-9]{0,4}" />
                                                        </div>
                                                    </div>
                                                    <div class="form-group">
                                                        <div class="col-sm-12" style="border-top-style:initial">
                                                            <div class="pull-right">
                                                                <button class="btn btn-success" type="button" id="submit_btn" onclick="ADDUOMTOSELECT()">
                                                                    <i class="ace-icon fa fa-plus bigger-110"></i>SAVE
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <div class="modal fade" id="myModal2" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document" style="height:auto;width:auto">
                <div class="modal-content">
                    <div class="modal-header" style="background: #FFEB3B">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <h4 class="modal-title" id="myModalLabel">GOODS RECEIVED NOTE<i class="fa  fa-hand-o-down animated bounce"></i></h4>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-xs-12">
                                <div class="form-group">
                                    <div class="widget-box">
                                        <div class="widget-body" style="display: block;">
                                            <div class="widget-main">
                                                <div class="page-content content-bg" ng-controller="ProductMasterController as ctrl" ng-init="CountryDetails();LoadProductData();vendornames();">
                                                    <div class="row padding-0">
                                                        <div class="col-sm-2 no-padding-right ">
                                                            <div class="row">
                                                                <div class="form-group">
                                                                    @*<label class="col-sm-12 control-label">
                                                                            Search
                                                                        </label>*@
                                                                    <div class="col-sm-12">
                                                                        <span class="input-icon width-100 grid-search input-icon-right">
                                                                            <input name="Line1" ng-model="q" placeholder="Type Product Name"
                                                                                   class="form-control" id="SearchVendorName" autocomplete="off" type="search" />
                                                                            <i class="ace-icon fa fa-search nav-search-icon"></i>
                                                                        </span>
                                                                    </div>
                                                                </div>


                                                                @*<div class="col-sm-12 ">
                                                                        <button class="btn width-100 padding-0 btn-message " type="button" ng-click="Reset();" ng-hide="btnSave=='Update'">
                                                                            <i class="fa fa-plus "></i> Add New Product
                                                                        </button>
                                                                    </div>*@



                                                            </div>


                                                            <div class="widget-box transparent no-padding">
                                                                <div class="widget-header widget-header-small">
                                                                    <h5 class="widget-title red dark-10 no-padding " style="font-size:16px; font-weight:600; margin:5px 0px;">
                                                                        <i class="ace-icon fa fa-cart-plus"></i>
                                                                        PRODUCTS
                                                                    </h5>

                                                                    <button class="btn btn-xs btn-primary pull_right   " type="button" ng-click="Reset();" ng-hide="btnSave=='Update'" style="float:right;">
                                                                        <i class="fa fa-plus "></i> Add
                                                                    </button>
                                                                    @*<button ng-click='VendorCancel(1)' class="red2" style="border:none;background-color:white;">
                                                                            <i class="ace-icon fa fa-times bigger-125"></i>Clear All
                                                                        </button>*@
                                                                </div>
                                                                <div class="widget-body no-padding" style="height:420px; overflow-y:auto;">
                                                                    <div class="widget-main no-padding">
                                                                        <div id="profile-feed-1" class="profile-feed" ng-repeat="x in Product | filter:q as results">
                                                                            <div class="profile-activity clearfix">
                                                                                @*<div class="time">
                                                                                        <i class="ace-icon fa fa-clock-o bigger-110"></i>
                                                                                        {{vendor.vendorcode}}
                                                                                    </div>*@
                                                                                <div class="">
                                                                                    <div class="col-sm-12">

                                                                                        @*<img class="pull-left ace-icon fa fa-user" alt="vendor" src="" />*@

                                                                                        <div>
                                                                                            {{x.productname}}
                                                                                        </div>
                                                                                        <div class="pull-right">
                                                                                            <button ng-click="EditProduct(x)" class=" blue no-border transparent-bg">
                                                                                                <i class="ace-icon fa fa-pencil bigger-125"></i>
                                                                                            </button>
                                                                                            <button ng-click="DeleteProduct(x) " class="red no-border transparent-bg">
                                                                                                <i class="ace-icon fa fa-trash bigger-125"></i>
                                                                                            </button>
                                                                                        </div>

                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div ng-if="results.length == 0" class="animate-repeat">
                                                                            <strong>No results found...</strong>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div>

                                                                    <button class="btn btn-block" type="button" ng-click="Productdetailsexport()">
                                                                        <i class="ace-icon fa fa-plus bigger-110"></i>Export
                                                                    </button>



                                                                </div>
                                                            </div>





                                                        </div>

                                                        @*<div class="widget-box transparent" style="margin:20px 0px; !important">
                                                                <div class="widget-header widget-header-small">
                                                                    <h4 class="widget-title blue smaller">
                                                                        <i class="ace-icon fa fa-rss orange"></i>
                                                                        Product Details
                                                                    </h4>
                                                                </div>
                                                                <div class="widget-body" style="display: block; height:200px; overflow:scroll">
                                                                    <div class="widget-main padding-8" ng-init="LoadProductData()">
                                                                        <div id="profile-feed-1" class="profile-feed" ng-repeat="x in Product">
                                                                            <div class="profile-activity clearfix">
                                                                                <div>
                                                                                    {{x.productname}}


                                                                                </div>

                                                                            </div>
                                                                            <div class="tools action-buttons">
                                                                                <a href="#" class="blue" ng-click="EditProduct(x) ">
                                                                                    <i class="ace-icon fa fa-pencil bigger-125"></i>
                                                                                </a>

                                                                                <a href="#" class="red" ng-click="DeleteProduct(x) ">
                                                                                    <i class="ace-icon fa fa-times bigger-125"></i>
                                                                                </a>
                                                                            </div>

                                                                        </div>

                                                                    </div>
                                                                </div>
                                                            </div>*@





                                                        <div class="col-sm-10">
                                                            <div class="tabbable">
                                                                <ul class="nav nav-tabs" id="myTab">
                                                                    <li class="active">
                                                                        <a aria-expanded="false" data-toggle="tab" href="#home">
                                                                            <i class="green ace-icon fa fa-home bigger-120"></i>
                                                                            Product
                                                                        </a>
                                                                    </li>
                                                                    <li>
                                                                        <a aria-expanded="true" data-toggle="tab" href="#messages">
                                                                            Vendor Info.
                                                                        </a>
                                                                    </li>
                                                                    <li>
                                                                        <a aria-expanded="true" data-toggle="tab" href="#messages1">
                                                                            Order Details
                                                                        </a>
                                                                    </li>
                                                                </ul>

                                                                <div class="tab-content  white-bg">
                                                                    <div id="home" class="tab-pane fade active in">
                                                                        <div class="row">
                                                                            <div class="col-xs-12">
                                                                                <form class="form-horizontal" role="form" name="ProductMasterfrm" novalidate>
                                                                                    <div class="form-group">
                                                                                        <label class="col-sm-2 control-label no-padding-right" for="form-field-1">
                                                                                            Product Name<span style="color: Red">*</span> :
                                                                                        </label>

                                                                                        <input type="text" name="productcode" ng-model="PM.productcode" hidden />
                                                                                        <input type="text" name="productcode" ng-model="PM.productid" hidden />
                                                                                        <div class="col-sm-10">
                                                                                            <input type="text" name="productname" ng-model="PM.productname" maxlength="250" capitalize kt-focus data-index="1"
                                                                                                   placeholder="Enter Product Name" class="form-control" ng-disabled="dsbProductname" required />

                                                                                            <span class="error" ng-show="(ProductMasterfrm.productname.$dirty || submitted) && ProductMasterfrm.productname.$error.required">
                                                                                                Product Name Required!
                                                                                            </span>

                                                                                        </div>

                                                                                    </div>

                                                                                    <div class="form-group">
                                                                                        <label class="col-sm-2 control-label no-padding-right" for="form-field-1">
                                                                                            Category <span style="color: Red">*</span> :
                                                                                        </label>

                                                                                        <div class="col-sm-4">

                                                                                            <ui-select name="category" id="category" required ng-model="ctrl.category.selected" on-select="Categoryfirstchange(ctrl.category.selected.CategoryId)" title="Choose a Product Category">
                                                                                                <ui-select-match placeholder="Select Product Category">{{$select.selected.CategoryName}}</ui-select-match>
                                                                                                <ui-select-choices repeat="category in Categories | propsFilter: {CategoryName: $select.search}">
                                                                                                    <div ng-bind-html="category.CategoryName | highlight: $select.search"></div>
                                                                                                </ui-select-choices>
                                                                                            </ui-select>
                                                                                            @*<span href="#" class="add-btn-popup" data-toggle="modal" data-target="#myModal"></span>*@
                                                                                            <span class="error" ng-show="(ProductMasterfrm.category.$dirty || submitted) && ProductMasterfrm.category.$error.required">
                                                                                                Category Name Required!
                                                                                            </span>

                                                                                        </div>
                                                                                        <label class="col-sm-2 control-label no-padding-right" for="form-field-1">
                                                                                            Subcategory  :
                                                                                        </label>
                                                                                        <div class="col-sm-4">
                                                                                            <ui-select name="subcategory" id="subcategory" ng-model="ctrl.subcategory.selected">
                                                                                                <ui-select-match placeholder="Select Product SubCategory">{{$select.selected.Subcategory}}</ui-select-match>
                                                                                                <ui-select-choices group-by="'Category'" repeat="subcategory in SubCategories | propsFilter: {Subcategory: $select.search}">
                                                                                                    <div ng-bind-html="subcategory.Subcategory | highlight: $select.search"></div>
                                                                                                </ui-select-choices>
                                                                                            </ui-select>
                                                                                        </div>
                                                                                    </div>
                                                                                    <div class="form-group">
                                                                                        <label class="col-sm-2 control-label no-padding-right" for="form-field-1">
                                                                                            Product Type <span style="color: Red">*</span> :
                                                                                        </label>
                                                                                        <div class="col-sm-4">
                                                                                            <ui-select name="producttypename" required ng-model="ctrl.product.selected" on-select="SelectProductType()" title="Choose a Product">
                                                                                                <ui-select-match placeholder="Select Product Type">{{$select.selected.producttypename}}</ui-select-match>
                                                                                                <ui-select-choices repeat=" product in ProductTypes | propsFilter: {producttypename: $select.search}">
                                                                                                    <div ng-bind-html="product.producttypename | highlight: $select.search"></div>
                                                                                                </ui-select-choices>
                                                                                            </ui-select>
                                                                                            <span class="error" ng-show="(ProductMasterfrm.producttypename.$dirty || submitted) && ProductMasterfrm.producttypename.$error.required">
                                                                                                Product Type Required!
                                                                                            </span>
                                                                                        </div>
                                                                                        <label class="col-sm-2 control-label no-padding-right" for="form-field-1">
                                                                                            UOM <span style="color: Red">*</span> :
                                                                                        </label>
                                                                                        <div class="col-sm-4">
                                                                                            <ui-select name="uom" required ng-model="ctrl.uom.selected" on-select="SelectMeasuredUOM(ctrl.uom.selected.uomid)" style="min-width: 300px;" title="Choose a Category">
                                                                                                <ui-select-match placeholder="Select Product UOM">{{$select.selected.uom}}</ui-select-match>
                                                                                                <ui-select-choices name="uom" repeat=" uom in UOMs | propsFilter: {uom: $select.search}">
                                                                                                    <div ng-bind-html="uom.uom | highlight: $select.search"></div>
                                                                                                </ui-select-choices>
                                                                                            </ui-select>
                                                                                            <span class="error" ng-show="(ProductMasterfrm.uom.$dirty || submitted) && ProductMasterfrm.uom.$error.required">
                                                                                                UOM Required!
                                                                                            </span>

                                                                                        </div>
                                                                                    </div>
                                                                                    <div class="form-group">
                                                                                        <label class="col-sm-2 control-label no-padding-right" for="form-field-1">
                                                                                            Sale Amount<span style="color: Red">*</span> :
                                                                                        </label>


                                                                                        <div class="col-sm-10">
                                                                                            <input type="text" name="numsalerate" ng-model="PM.numsalerate" maxlength="10" placeholder="Enter Sale Amount" kit-amount class="form-control" />


                                                                                            @*<span class="error" ng-show="(ProductMasterfrm.numsalerate.$dirty || submitted) && ProductMasterfrm.numsalerate.$error.required">
                                                                                                    Sale Amount Required!
                                                                                                </span>*@

                                                                                        </div>

                                                                                    </div>
                                                                                    @*<div class="form-group">
                                                                                        <label class="col-sm-2 control-label no-padding-right" for="form-field-1">
                                                                                            Storage Location<span style="color: Red">*</span> :
                                                                                        </label>
                                                                                        <div class="col-sm-4">

                                                                                            <ui-select name="storage" ng-model="ctrl.storage.selected" on-select="SelectStorage2(ctrl.storage.selected.storagelocationid)" style="min-width: 300px;" title="Choose a Category">
                                                                                                <ui-select-match placeholder="Select storage Location">{{$select.selected.storagelocationname}}</ui-select-match>
                                                                                                <ui-select-choices repeat="storage in Storages | propsFilter: {storagelocationname: $select.search}">
                                                                                                    <div ng-bind-html="storage.storagelocationname | highlight: $select.search"></div>
                                                                                                </ui-select-choices>
                                                                                            </ui-select>


                                                                                            @*<ui-select name="storage" required multiple ng-model="ctrl.storage.selected" class="form-control" on-remove="SelectStorage($item.storagelocationid, $model, ctrl.storage.selected.storagelocationid)" on-select=" SelectStorage($item.storagelocationid, $model, ctrl.storage.selected)">
                                                                                                    <ui-select-match placeholder="Select a person in the list or search his name/age...">{{$item.storagelocationname}}</ui-select-match>
                                                                                                    <ui-select-choices repeat="storage in Storages | propsFilter: {storagelocationname: $select.search}">
                                                                                                        <div ng-bind-html="storage.storagelocationname | highlight: $select.search"></div>

                                                                                                    </ui-select-choices>
                                                                                                </ui-select>*@
                                                                                    @*<span class="error" ng-show="(ProductMasterfrm.storage.$dirty || submitted) && ProductMasterfrm.storage.$error.required">
                                                                                            Storage Location Required!
                                                                                        </span>*@
                                                                                    @*</div>*@
                                                                                    @*<label class="col-sm-2 control-label no-padding-right" for="form-field-1">
                                                                                            Shelf Name  :
                                                                                        </label>
                                                                                        <div class="col-sm-4">
                                                                                            <ui-select ng-model="ctrl.shelf.selected" style="min-width: 300px;">
                                                                                                <ui-select-match placeholder="Select Shelf Name">{{$select.selected.shelfname}}</ui-select-match>
                                                                                                <ui-select-choices name="shelf" repeat=" shelf in Shelfs | propsFilter: {shelfname: $select.search}">
                                                                                                    <div ng-bind-html="shelf.shelfname | highlight: $select.search"></div>
                                                                                                </ui-select-choices>
                                                                                            </ui-select>
                                                                                        </div>*@
                                                                                    @*</div>*@
                                                                                    @*<div class="form-group">
                                                                                            <label class="col-sm-2 control-label no-padding-right" for="form-field-1">
                                                                                                Min Qty. :
                                                                                            </label>
                                                                                            <div class="col-sm-4">
                                                                                                <input type="text" name="Minqty" ng-model="PM.Minqty" maxlength="7" kit-quantity kt-focus data-index="8"
                                                                                                       placeholder="Enter Min Qty." class="form-control" />
                                                                                                <span class="error" ng-show="(ProductMasterfrm.Minqty.$dirty || submitted) && ProductMasterfrm.Minqty.$error.required">Min Qty. Required!</span>

                                                                                            </div>
                                                                                            <label class="col-sm-2 control-label no-padding-right" for="form-field-1">
                                                                                                Max Qty. :
                                                                                            </label>
                                                                                            <div class="col-sm-4">
                                                                                                <input type="text" name="maxqty" ng-model="PM.Maxqty" maxlength="7" placeholder="Enter Max Qty." kit-quantity kt-focus data-index="9"
                                                                                                       class="form-control" />
                                                                                                <span class="error" ng-show="(ProductMasterfrm.maxqty.$dirty || submitted) && ProductMasterfrm.maxqty.$error.required">Max Qty. Required!</span>

                                                                                            </div>
                                                                                        </div>*@


                                                                                    <div class="col-sm-12">
                                                                                        <div class="pull-right">
                                                                                            @*<button class="btn-app" type="button" ng-click="Productdetailsexport()">
                                                                                                <i class="ace-icon fa fa-plus bigger-110"></i>Export
                                                                                                            </button>
                                                                                                               &nbsp; &nbsp; &nbsp;*@
                                                                                            <button class="btn btn-success" type="button" ng-click="Save(PM)" data-index="10">
                                                                                                <i class="ace-icon fa fa-plus bigger-110"></i>{{btnSave}}
                                                                                            </button>
                                                                                            &nbsp; &nbsp; &nbsp;
                                                                                            <button class="btn orange" ng-click="Reset()" id="Reset">
                                                                                                <i class="ace-icon fa fa-undo bigger-110"></i>Reset
                                                                                            </button>
                                                                                        </div>
                                                                                    </div>
                                                                                </form>
                                                                            </div>

                                                                        </div>
                                                                    </div>




                                                                    <div id="messages" class="tab-pane fade ">
                                                                        <div class="row">
                                                                            <div class="col-xs-12">
                                                                                <form class="form-horizontal" role="form" name="fmvendorproductdetails" novalidate style="border:inherit;border-bottom-width:1px;">
                                                                                    <div class="widget-box">


                                                                                        <div class="form-group">

                                                                                            <label class="col-sm-2 control-label">
                                                                                                Product Name:
                                                                                            </label>
                                                                                            <div class="col-sm-4">
                                                                                                <input type="text" name="vendorproductname" ng-model="VP.productname" placeholder="Enter Product Name"
                                                                                                       class="form-control" id="vendorproductname" maxlength="100" required disabled />
                                                                                            </div>
                                                                                        </div>

                                                                                        <div class="form-group">

                                                                                            <label class="col-sm-2 control-label">
                                                                                                Product UOM<span style="color: Red">*</span>:
                                                                                            </label>
                                                                                            <div class="col-sm-4">
                                                                                                <input type="text" name="uomname" ng-model="VP.productuom" placeholder="Enter Product UOM"
                                                                                                       class="form-control" id="uomname" required disabled />
                                                                                            </div>
                                                                                        </div>
                                                                                        <div class="form-group">
                                                                                            <label class="col-sm-2 control-label">
                                                                                                Vendor Name<span style="color: Red">*</span>:
                                                                                            </label>
                                                                                            <div class="col-sm-4">
                                                                                                <select name="vendor" id="vendor" ng-model="VP.vendorid" placeholder="Vendor Name" ng-options="c.vendorid as c.vendorname for c in Vendors"
                                                                                                        class="form-control" required kt-focus data-index="1" ng-disabled="VPvendorname">
                                                                                                    <option value="">Select Vendor Name</option>
                                                                                                </select>
                                                                                                <span class="error" ng-show="(fmvendorproductdetails.vendor.$dirty || VPsubmitted) && fmvendorproductdetails.vendor.$error.required">
                                                                                                    Vendor Required!
                                                                                                </span>
                                                                                            </div>
                                                                                        </div>
                                                                                        <div class="form-group">
                                                                                            <label class="col-sm-2 control-label">
                                                                                                Product Cost<span style="color: Red"></span>:
                                                                                            </label>
                                                                                            <div class="col-sm-4">
                                                                                                <input type="text" name="productcost" ng-model="VP.productcost" placeholder="Enter Cost"
                                                                                                       class="form-control" id="productcost" maxlength="7" kit-amount style="text-align:right;" />
                                                                                                <span class="error" ng-show="(fmvendorproductdetails.productcost.$dirty || VPsubmitted) && fmvendorproductdetails.productcost.$error.required">
                                                                                                    Cost Required!
                                                                                                </span>
                                                                                            </div>
                                                                                        </div>

                                                                                        <div class="form-group">
                                                                                            <div class="col-sm-6" style="border-top-style:initial">
                                                                                                <div class="pull-right">
                                                                                                    <button class="btn btn-success" type="button" ng-click="SaveVendors(VP);">
                                                                                                        <i class="ace-icon fa fa-plus bigger-110"></i>{{btnProductsSave}}
                                                                                                    </button>
                                                                                                    <button class="btn orange" type="button" ng-click="ResetVendors()">
                                                                                                        <i class="ace-icon fa fa-undo bigger-110"></i>Reset
                                                                                                    </button>
                                                                                                </div>
                                                                                            </div>
                                                                                        </div>
                                                                                    </div>
                                                                                </form>
                                                                                <table id="grdProductsList" class="table " style="border:medium;">
                                                                                    <tr class="row">
                                                                                        <th></th>
                                                                                        @*<th hidden>Product ID</th>*@
                                                                                        <th>Vendor Name</th>
                                                                                        <th>Product Name</th>
                                                                                        <th hidden>Product MesuredUOM</th>
                                                                                        <th>Product UOM</th>
                                                                                        <th>Product Cost</th>
                                                                                        <th hidden>Vendor Id</th>
                                                                                        @*< <th hidden>Product Date</th>*@
                                                                                    </tr>
                                                                                    <tr ng-repeat="product in VendorProductsDetails" class="row" style="border:medium;border-bottom-width:5px;">
                                                                                        <td>
                                                                                            <button ng-click='editVendor(product);' class="blue" style="border:none;background-color:white;">
                                                                                                <i class="ace-icon fa fa-pencil bigger-125"></i>
                                                                                            </button>
                                                                                            <button ng-disabled="btnDeletevendor" ng-click='DeleteVendor(product);' class="red" style="border:none;background-color:white;">
                                                                                                <i class="ace-icon fa fa-trash bigger-125"></i>
                                                                                            </button>
                                                                                        </td>

                                                                                        <td>{{product.vendorname}}</td>
                                                                                        <td>{{product.productname}}</td>

                                                                                        <td hidden>{{PM.MeasuredUOMName}}</td>
                                                                                        <td>{{product.uom}}</td>
                                                                                        <td>{{product.productcost}}</td>
                                                                                        <td hidden>{{product.vendorid}}</td>

                                                                                    </tr>
                                                                                </table>
                                                                                @*<table id="grid-pager" ng-show="Editmode"></table>*@
                                                                            </div>
                                                                        </div>
                                                                    </div>

                                                                    <div id="messages1" class="tab-pane fade ">
                                                                        <div class="row">
                                                                            <div class="col-xs-12">
                                                                                <table id="grdOrdersList1" class="table  white-bg" style="border:medium;">


                                                                                    <tr class="row">
                                                                                        <th>Order No</th>
                                                                                        <th>Vendor Name</th>
                                                                                        <th>Product Name</th>
                                                                                        <th>Qty.</th>
                                                                                        <th>Rate</th>
                                                                                    </tr>
                                                                                    <tr ng-repeat="Orders in OrdersDetails" class="row" style="border:medium;border-bottom-width:5px;">
                                                                                        <td>{{Orders.OrderNo}}</td>
                                                                                        <td>{{Orders.vendorname}}</td>
                                                                                        <td>{{Orders.productname}}</td>

                                                                                        <td>{{Orders.orderqty}}</td>
                                                                                        <td>{{Orders.Rate}}</td>


                                                                                    </tr>
                                                                                </table>

                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>

                                                            </div>
                                                        </div>

                                                    </div>
                                                </div>

                                                <!-- Modal add categories -->
                                                <div class="modal " id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="false">
                                                    <div class="modal-dialog add-popup animated fadeInRightBig " role="document">
                                                        <div class="modal-content" style="height:100%;">
                                                            <div class="modal-header">
                                                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                                    <span aria-hidden="true">&times;</span>
                                                                </button>
                                                                <h4 class="modal-title" id="myModalLabel">Modal title</h4>
                                                            </div>
                                                            <div class="modal-body">
                                                                ...
                                                            </div>
                                                            <div class="modal-footer">
                                                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                                                <button type="button" class="btn btn-primary">Save changes</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>


                                                <script type="text/javascript">
                                                    var app = angular.module('RMS');
                                                    app.controller('ProductMasterController', function ($scope, $http, $rootScope) {
                                                        debugger

                                                        //****************** Declarations *******************************//
                                                        var vm = this;
                                                        //Product

                                                        $scope.PM = {};

                                                        $scope.submitted = false;
                                                        $scope.VDisFormValid = false;
                                                        $scope.btnSave = "Save";
                                                        $rootScope.FormName = "GOODS RECEIVED NOTE";
                                                        $rootScope.ModuleName = "MMS Masters";
                                                        $scope.Editmode = false;

                                                        //Vendor

                                                        $scope.VPsubmitted = false;
                                                        $scope.VPisFormValid = false;
                                                        $scope.VPvendorname = false;
                                                        $scope.btnProductsSave = "Save";
                                                        $scope.editData = {};
                                                        $scope.VP = {};
                                                        $scope.personAsync = { selected: "wladimir@email.com" };
                                                        $scope.peopleAsync = [];

                                                        //$scope.onSelectCallback = function (item, model) {
                                                        //    debugger
                                                        //    $scope.test = item;
                                                        //    // alert(5);
                                                        //    //  vm.counter++;
                                                        //    $scope.eventResult = { item: item, model: model };
                                                        //};
                                                        //  vm.person = {};


                                                        $scope.createSearchChoice = function (item) {
                                                            return { id: Math.floor((Math.random() * 10000) + 1), name: item };
                                                        };

                                                        //****************** Click Events Product  *******************************//

                                                        $scope.EditProduct = function (x) {
                                                            debugger;
                                                            vm.category = {};
                                                            vm.subcategory = {};
                                                            vm.product = {};
                                                            vm.uom = {};
                                                            vm.storage = {};
                                                            vm.shelf = {};
                                                            vm.category.selected = {};
                                                            vm.subcategory.selected = {};
                                                            vm.product.selected = {};
                                                            vm.uom.selected = {};
                                                            vm.storage.selected = {};
                                                            vm.shelf.selected = {};

                                                            var copy = Object.assign({}, x);
                                                            $scope.PM = copy;
                                                            $scope.dsbProductname = true;

                                                            vm.category.selected.CategoryName = $scope.PM.CategoryName;
                                                            vm.category.selected.CategoryId = $scope.PM.CategoryId;

                                                            if (angular.isDefined(vm.subcategory.selected)) {
                                                                vm.subcategory.selected.Subcategory = $scope.PM.Subcategory;
                                                                vm.subcategory.selected.SubcategoryId = $scope.PM.SubCategoryId;
                                                            }
                                                            vm.product.selected.producttypename = $scope.PM.producttypename;
                                                            vm.product.selected.producttypeid = $scope.PM.producttypeid;
                                                            vm.product.selected.productid = $scope.PM.productid;
                                                            vm.uom.selected.uom = $scope.PM.MeasuredUOMName;
                                                            vm.uom.selected.uomid = $scope.PM.uomid;

                                                            vm.storage.selected.storagelocationname = $scope.PM.storagelocationname;
                                                            vm.storage.selected.storagelocationid = $scope.PM.storagelocationid;

                                                            if (angular.isDefined(vm.shelf.selected)) {
                                                                vm.shelf.selected.shelfname = $scope.PM.shelfname;
                                                                vm.shelf.selected.shelfid = $scope.PM.shelfid;
                                                            }
                                                            //  vm.category.selected = $scope.PM.CategoryName;
                                                            //vm.subcategory.selected.Subcategory = $scope.PM.Subcategory;
                                                            //vm.product.selected.producttypename = '';
                                                            //vm.uom.selected.uom = '';
                                                            //vm.storage.selected.storagelocationname = '';
                                                            //vm.shelf.selected.shelfname = '';


                                                            //  alert($scope.x.SubCategoryId);
                                                            //  $("#subcategory option:selected").text = x.Subcategory;
                                                            //  $("#subcategory").val( $scope.x.SubCategoryId);
                                                            //$("#subcategory").attr('selectedIndex', $scope.x.SubCategoryId);
                                                            // $scope.PM = angular.copy(x);

                                                            $scope.PM.CategoryId = parseInt(copy.CategoryId);
                                                            $scope.Categorychange(copy.CategoryId);
                                                            // vm.subcategory.selected.SubCategoryId = (copy.SubCategoryId);
                                                            //  $scope.PM.SubCategoryId = parseInt(copy.SubCategoryId);
                                                            //  $scope.SelectStorage(copy.storagelocationid);
                                                            //  $scope.PM.shelfid = parseInt(copy.shelfid);
                                                            // vm.shelf.selected.shelfid = parseInt(copy.shelfid);
                                                            $scope.btnSave = "Update";
                                                            $scope.VP.productname = $scope.PM.productname;
                                                            $scope.VP.productuom = $scope.PM.MeasuredUOMName;
                                                            //  vm.uom.selected.uom = $scope.PM.MeasuredUOMName;
                                                            $scope.LoadVendorDetails();
                                                            // $scope.Editmode = true;
                                                            // $scope.$apply();
                                                        }

                                                        $scope.DeleteProduct = function (x) {

                                                            var productcode = x.productcode;
                                                            debugger;
                                                            var ans = confirm("Are You Sure? Do You Want To Delete?");
                                                            if (ans) {
                                                                $http({
                                                                    url: '/MMSMaster/DeleteProductMaster/',
                                                                    method: "POST",
                                                                    data: { productcode: x.productcode }
                                                                }).success(function (data) {
                                                                    if (data == true) {
                                                                        alert("Product Details Deleted Successfully");
                                                                        $scope.LoadProductData();
                                                                        ClearForm();
                                                                    }
                                                                    else if (data == false) {
                                                                        alert("Cannot Delete Product Details  as it is in use by the application");
                                                                    }
                                                                })

                                                            }

                                                        };
                                                        $scope.Save = function (PM) {
                                                            debugger;
                                                            var tee = vm;
                                                            PM.storagelocationid = 1;
                                                            PM.storagelocationname = "MAIN STORAGE";
                                                            // var rt = $select;
                                                            //  var ts = $("select[name='category'] option:selected");
                                                            $scope.submitted = true;
                                                            if ($scope.VDisFormValid) {

                                                                if (angular.isDefined($scope.PM.Minqty) || angular.isDefined($scope.PM.Maxqty)) {
                                                                    if (parseInt($scope.PM.Minqty) > parseInt($scope.PM.Maxqty)) {
                                                                        alert("Min Qty. Should be less than or equal to Max Qty.");
                                                                        return false;
                                                                    }
                                                                }
                                                                // vm.subcategory = {};
                                                                if ($scope.btnSave == "Save") {
                                                                    // vm.shelf = {};
                                                                }
                                                                // $scope.PM.SubCategoryId = {};
                                                                $scope.PM.CategoryName = vm.category.selected.CategoryName;
                                                                $scope.PM.CategoryId = vm.category.selected.CategoryId;
                                                                if (angular.isDefined(vm.subcategory.selected)) {
                                                                    $scope.PM.Subcategory = vm.subcategory.selected.Subcategory;
                                                                    $scope.PM.SubcategoryId = vm.subcategory.selected.SubCategoryId;
                                                                }
                                                                else {


                                                                    PM["SubCategoryId"] = "0";
                                                                    PM["Subcategory"] = "";
                                                                }
                                                                $scope.PM.producttypename = vm.product.selected.producttypename;
                                                                $scope.PM.producttypeid = vm.product.selected.producttypeid;
                                                                $scope.PM.uomid = vm.uom.selected.uomid;
                                                                $scope.PM.uom = vm.uom.selected.uom;

                                                                $scope.PM.SaleAmount = $scope.PM.SaleAmount;
                                                                //var storageNames = vm.storage.selected.map(function (l, f, d) {
                                                                //    return l.storagelocationname;
                                                                //});
                                                                //var storagelocationid = vm.storage.selected.map(function (l, f, d) {
                                                                //    return l.storagelocationid;
                                                                //})
                                                                //$scope.PM.storagelocationname = storageNames.toString();
                                                                // $scope.PM.storagelocationid = storagelocationid.toString();
                                                                $scope.PM.storagelocationname = "";
                                                                $scope.PM.storagelocationid = 0;
                                                                if (vm.shelf !== undefined) {
                                                                    if (angular.isDefined(vm.shelf.selected)) {
                                                                        $scope.PM.shelfid = vm.shelf.selected.shelfid;
                                                                        $scope.PM.shelfname = vm.shelf.selected.shelfname;
                                                                    }
                                                                    else {
                                                                        PM["shelfid"] = "0";
                                                                        PM["shelfname"] = "";
                                                                    }
                                                                }

                                                                else {
                                                                    PM["shelfid"] = "0";
                                                                    PM["shelfname"] = "";
                                                                }
                                                                // $scope.PM.storagelocationname = vm.storage.selected;




                                                                if ($scope.btnSave == "Save") {
                                                                    var ans = confirm($rootScope.msgSave);
                                                                    if (ans) {

                                                                        $http.post('/MMSMaster/SaveProductMaster', { PM: JSON.stringify(PM) }).success(function (data) {
                                                                            debugger
                                                                            if (data.Data > 0) {
                                                                                alert("Product Details Saved Successfully");
                                                                                $scope.ProductMasterfrm.$setPristine();
                                                                                $scope.submitted = false;
                                                                                $scope.LoadProductData();
                                                                                $scope.VP.productname = $scope.PM.productname;
                                                                                // $scope.VP.productuom = $scope.PM.MeasuredUOMName;
                                                                                $scope.VP.productuom = vm.uom.selected.uom;
                                                                                $scope.VP.productid = data.Data;
                                                                                $scope.VP.productcode = data.Data1;
                                                                                $scope.VP.productuptodate = new Date().getYear() + "-" + new Date().getMonth() + "-" + new Date().getDate();

                                                                                ClearForm();

                                                                            } else {
                                                                                alert("Product Name  Already Exist!");
                                                                            }
                                                                        })
                                                                    }
                                                                }
                                                                else {
                                                                    var ans = confirm($rootScope.msgUpdate);
                                                                    if (ans) {
                                                                        $http.post('/MMSMaster/UpdateProductdetails', { PM: JSON.stringify(PM) }).success(function (data) {
                                                                            debugger
                                                                            if (data == 1) {

                                                                                alert("Product Details Updated Successfully");
                                                                                $scope.LoadProductData();
                                                                                ClearForm();

                                                                            } else {
                                                                                alert("Cannot Update Product Details as it is in use by the application");
                                                                            }
                                                                        })
                                                                    }
                                                                }
                                                            }
                                                        };
                                                        $scope.Reset = function () {
                                                            debugger
                                                            ClearForm();
                                                            ClearVendorForm();
                                                            $scope.VendorProductsDetails = {};
                                                            $scope.OrdersDetails = {};
                                                        }

                                                        $scope.Productdetailsexport = function () {

                                                            var w = window.open("/MMSReports/Productdetailsreport/", '_blank');
                                                        }

                                                        $scope.Categoryfirstchange = function (x) {
                                                            debugger;

                                                            $scope.Categorychange(x);
                                                            $scope.ctrl.subcategory = {};


                                                            // $scope.ctrl.subcategory.selected = {};
                                                            // $scope.ctrl.subcategory.selected.SubCategoryId = '';

                                                        };





                                                        //****************** Change Events  *******************************//
                                                        //$scope.sri = function (name) {
                                                        //    $scope.SelectStorage(name);
                                                        //    alert(name);
                                                        //}
                                                        //$scope.test = ['A', 'C'];

                                                        $scope.Categorychange = function (x) {
                                                            debugger;

                                                            if (angular.isDefined(x)) {
                                                                $http({
                                                                    url: '/MMSMaster/getProductSubCategory/',
                                                                    method: "POST",
                                                                    data: { CategoryId: x }
                                                                }).success(function (data) {
                                                                    debugger;

                                                                    $scope.SubCategories = data;

                                                                })
                                                            }
                                                        };





                                                        $scope.$watch('ProductMasterfrm.$valid', function (newValue) {
                                                            $scope.VDisFormValid = newValue;
                                                        });
                                                        $scope.SelectStorage2 = function (x) {
                                                            debugger
                                                            //  alert(x);
                                                            if (x != "") {

                                                                if (angular.isDefined(x) && x != "") {
                                                                    $scope.ctrl.shelf = {};
                                                                    $http({
                                                                        url: '/MMSMaster/getShelfnames/',
                                                                        method: "POST",
                                                                        data: { Storageid: x }
                                                                    }).success(function (data) {
                                                                        debugger;

                                                                        $scope.Shelfs = data;

                                                                    }).error(function () {
                                                                        // alert("Error Occurred");
                                                                    });
                                                                }
                                                            } else {
                                                                $scope.test = undefined;
                                                                $scope.shelfid = undefined;
                                                                vm.shelfid = undefined;
                                                                $scope.Shelfs = [];
                                                            }
                                                        }
                                                        $scope.SelectStorage = function (x, model, items) {
                                                            debugger


                                                            var ty = items.map(function (l, f, d) {
                                                                return l.storagelocationid;
                                                            })
                                                            var test = ty.toString();
                                                            // var sri = this.ngModel.$modelValue;


                                                            if (test != "") {

                                                                if (angular.isDefined(x) && x != "") {
                                                                    $http({
                                                                        url: '/MMSMaster/getShelfnames/',
                                                                        method: "POST",
                                                                        data: { Storageid: test }
                                                                    }).success(function (data) {
                                                                        debugger;

                                                                        $scope.Shelfs = data;

                                                                    }).error(function () {
                                                                        // alert("Error Occurred");
                                                                    });
                                                                }
                                                            } else {
                                                                $scope.test = undefined;
                                                                $scope.shelfid = undefined;
                                                                vm.shelfid = undefined;
                                                                $scope.Shelfs = [];
                                                            }
                                                        }
                                                        $scope.SelectMeasuredUOM = function (c) {

                                                            debugger;


                                                            $scope.PM.MeasuredUOMName = $.grep($scope.UOMs, function (c) {
                                                                debugger;
                                                                return c.uomid == $scope.PM.uomid;
                                                            })[0].uom;

                                                            if ($scope.btnSave == 'Update') {

                                                                $scope.VP.productuom = $scope.PM.MeasuredUOMName;
                                                            }

                                                            $scope.PM.Purchaseuom = $scope.PM.uomid;;
                                                            $scope.PM.Salesuom = $scope.PM.uomid;;


                                                            $scope.PM.PurchaseuomName = $.grep($scope.UOMs, function (c) {
                                                                debugger;
                                                                return c.uomid == $scope.PM.uomid;
                                                            })[0].uom;
                                                            $scope.PM.SalesuomName = $.grep($scope.UOMs, function (c) {
                                                                debugger;
                                                                return c.uomid == $scope.PM.uomid;
                                                            })[0].uom;


                                                            $scope.PM.PurchaseUOMfrom = 1;
                                                            $scope.PM.PurchaseUOMTo = 1;
                                                            $scope.PM.SalesuomFrom = 1;
                                                            $scope.PM.SalesuomTo = 1;
                                                        }
                                                        $scope.SelectSalesuom = function (c) {

                                                            debugger;
                                                            $scope.PM.SalesuomName = $.grep($scope.UOMs, function (c) {
                                                                debugger;
                                                                return c.uomid == $scope.PM.Salesuom;
                                                            })[0].uom;
                                                        }
                                                        $scope.SelectPurchaseuom = function (c) {

                                                            debugger;
                                                            $scope.PM.PurchaseuomName = $.grep($scope.UOMs, function (c) {
                                                                debugger;
                                                                return c.uomid == $scope.PM.Purchaseuom;
                                                            })[0].uom;
                                                        }
                                                        $scope.$watch('ProductMasterfrm.$valid', function (newValue) {
                                                            $scope.VDisFormValid = newValue;
                                                        });
                                                        $scope.$watch('fmvendorproductdetails.$valid', function (newValue) {
                                                            debugger
                                                            $scope.VPisFormValid = newValue;
                                                        });

                                                        //****************** Binding Product Details *******************************//

                                                        $scope.LoadProductData = function () {
                                                            //$scope.PM.PurchaseUOMTo = 1;
                                                            //$scope.PM.SalesuomTo = 1;
                                                            //$scope.PM.Minqty = 0;
                                                            //$scope.PM.Maxqty = 0;
                                                            debugger;
                                                            $http({
                                                                url: '/MMSMaster/ShowProductdetails/',
                                                                method: "get"
                                                            }).success(function (data) {
                                                                debugger;
                                                                $scope.Product = data.lstDetails;
                                                                $scope.Vendors = data.lstvendors;
                                                                $scope.UOMs = data.lstUOM;
                                                            }).error(function (data) {
                                                                //alert("Error Occurred");
                                                            });
                                                        };

                                                        $http({
                                                            url: '/MMSMaster/ShowProductCategory/',
                                                            method: "get"

                                                        }).success(function (data) {
                                                            debugger;
                                                            $scope.Categories = data;

                                                        })
                                                           .error(function () {
                                                               //console.log("Error Occurred");
                                                           });


                                                        $http({
                                                            url: '/MMSMaster/ShowProductType1/',
                                                            method: "get"

                                                        }).success(function (data) {
                                                            debugger;
                                                            $scope.ProductTypes = data;

                                                        }).error(function () {
                                                            // console.log("Error Occurred");
                                                        });



                                                        $http({
                                                            url: '/MMSMaster/ShowStorageLocation1/',
                                                            method: "get"

                                                        }).success(function (data) {
                                                            debugger;
                                                            $scope.Storages = data;

                                                            $scope.Test = []
                                                            for (var i = 0; i < data.length; i++) {
                                                                $scope.Test.push({ 'id': $scope.Storages[i].storagelocationid, 'name': data[i].storagelocationname })
                                                            }


                                                        }).error(function () {
                                                            // console.log("Error Occurred");
                                                        });






                                                        //****************** Clear Details *******************************//

                                                        function ClearForm() {
                                                            $('#productid')[0].options.length = 0;
                                                            $('#ProductName').focus();
                                                            $scope.PM = {};
                                                            if (vm.category !== undefined) {
                                                                vm.category.selected = '';
                                                                vm.subcategory.selected = '';
                                                                vm.product.selected = '';
                                                                vm.uom.selected = '';
                                                                vm.storage.selected = '';
                                                                vm.shelf.selected = '';
                                                                //  vm = [];

                                                                vm.CategoryId = undefined;
                                                                // $scope.CategoryId = undefined;
                                                                vm.SubCategoryId = undefined;
                                                                vm.producttypeid = undefined;
                                                                vm.shelfid = undefined;
                                                                vm.test = undefined;
                                                                vm.uomid = undefined;
                                                                // vm.producttypename = undefined;
                                                            }


                                                            $scope.btnSave = "Save";

                                                            $scope.submitted = false;
                                                            // $scope.Editmode = false;
                                                            $scope.dsbProductname = false;
                                                            $scope.ProductMasterfrm.$setPristine();
                                                        }



                                                        //****************** Vendor Save  *******************************//

                                                        //****************** Click Events Vendor  *******************************//

                                                        $scope.SaveVendors = function (VP) {
                                                            debugger;
                                                            $scope.VPsubmitted = true;
                                                            if ($scope.VPisFormValid) {

                                                                if ($scope.btnProductsSave == "Save") {

                                                                    var ans = confirm($rootScope.msgSave);

                                                                    if (ans) {
                                                                        if ($scope.btnSave == "Update") {
                                                                            $scope.VP.productname = $scope.PM.productname;
                                                                            $scope.VP.productcode = $scope.PM.productcode;
                                                                            $scope.VP.productid = $scope.PM.productid;
                                                                            $scope.VP.productuptodate = new Date().getYear() + "-" + new Date().getMonth() + "-" + new Date().getDate();
                                                                        }
                                                                        else {
                                                                            $scope.PM.productname = $scope.VP.productname;
                                                                            $scope.PM.productcode = $scope.VP.productcode;
                                                                            $scope.PM.productid = $scope.VP.productid;
                                                                        }
                                                                        // var VP = '';
                                                                        if ($scope.VP.productcost == '' || $scope.VP.productcost == null) {
                                                                            $scope.VP.productcost = 0;
                                                                        }
                                                                        $scope.VP.productuptodate = new Date().getYear() + "-" + new Date().getMonth() + "-" + new Date().getDate();
                                                                        //$http.post('/MMSMaster/SavevendorProductsMaster', { VP: JSON.stringify(VP) }).success(function (data) {
                                                                        $http.post('/MMSMaster/SavevendorProductsMaster', { VP: JSON.stringify($scope.VP) }).success(function (data) {

                                                                            debugger
                                                                            if (data) {
                                                                                alert("Vendor Details Saved Successfully");
                                                                                // var prdtname = $scope.PM.productname;
                                                                                $scope.LoadProductData();
                                                                                $scope.LoadVendorDetails();
                                                                                // $scope.VP.productcode = $scope.PM.productcode;
                                                                                //$scope.VP.productid = $scope.PM.productid;

                                                                                var prdtname = $scope.VP.productname;
                                                                                var prdtcode = $scope.VP.productcode;
                                                                                var prdtuom = $scope.VP.productuom;
                                                                                var id = $scope.VP.productid;
                                                                                ClearVendorForm();

                                                                                $scope.VP.productname = prdtname;
                                                                                $scope.VP.productcode = prdtcode;
                                                                                $scope.VP.productuom = prdtuom;
                                                                                $scope.VP.productid = id;

                                                                            } else {
                                                                                alert("Vendor Name  Already Exist!");
                                                                            }
                                                                        }).error(function (data) {
                                                                            // alert("Error found");
                                                                        });
                                                                    }

                                                                }
                                                                else if ($scope.btnProductsSave == "Update") {
                                                                    debugger;
                                                                    var ans = confirm($rootScope.msgUpdate);
                                                                    if (ans) {
                                                                        debugger;
                                                                        var ID = $scope.VP.vendorid;
                                                                        // var ID = $scope.VP.vendorcode;
                                                                        $scope.VP.productuptodate = new Date().getYear() + "-" + new Date().getMonth() + "-" + new Date().getDate();
                                                                        if ($scope.VP.productcost == '' || $scope.VP.productcost == null) {
                                                                            $scope.VP.productcost = 0;
                                                                        }
                                                                        $http.post('/MMSMaster/UpdatevendorProductsinfo', { VP: JSON.stringify(VP) }).success(function (data) {
                                                                            debugger
                                                                            if (data) {
                                                                                alert("Vendor Product Details Updated Successfully");
                                                                                $scope.LoadProductData();
                                                                                $scope.LoadVendorDetails();
                                                                                var prdtuom = $scope.VP.uom;
                                                                                var prdtid = $scope.VP.productid;
                                                                                ClearVendorForm();
                                                                                $scope.VP.productname = $scope.PM.productname;
                                                                                $scope.VP.productcode = $scope.PM.productcode;
                                                                                if ($scope.PM.MeasuredUOMName !== undefined) {
                                                                                    $scope.VP.productuom = $scope.PM.MeasuredUOMName;
                                                                                    $scope.VP.productid = $scope.PM.productid;
                                                                                }
                                                                                else {
                                                                                    $scope.VP.productuom = prdtuom;
                                                                                    $scope.VP.productid = prdtid;
                                                                                }


                                                                            } else {
                                                                                alert("Cannot Update Vendor Product Details as it is in use by the application");
                                                                            }
                                                                        }).error(function (data) {
                                                                            //alert("Error found");
                                                                        });
                                                                    }
                                                                }



                                                            }
                                                        };
                                                        $scope.editVendor = function (product) {
                                                            debugger;
                                                            var copy = Object.assign({}, product);
                                                            $scope.VP = copy;
                                                            if ($scope.PM.MeasuredUOMName !== undefined) {
                                                                $scope.VP.productuom = $scope.PM.MeasuredUOMName;
                                                                $scope.VP.productid = parseInt($scope.PM.productid);
                                                            }
                                                            else {
                                                                $scope.VP.productuom = $scope.VP.uom;
                                                                $scope.VP.productid = $scope.PM.productid;
                                                            }

                                                            $scope.btnProductsSave = "Update";
                                                            $scope.VPvendorname = true;
                                                            $scope.$apply();
                                                            $scope.btnDeletevendor = true;
                                                        };
                                                        $scope.DeleteVendor = function (product) {
                                                            debugger;
                                                            if ($scope.btnProductsSave == "Save") {
                                                                var ans = confirm("Are You Sure? Do You Want To Delete?");
                                                                if (ans) {
                                                                    var VP = Object.assign({}, product);
                                                                    var id = $scope.VP.vendorid;
                                                                    $http.post('/MMSMaster/Deletevendorproducts', { VP: JSON.stringify(VP) }).success(function (data) {
                                                                        if (data === true) {
                                                                            debugger;
                                                                            alert("Product Details Deleted Successfully");

                                                                            $scope.LoadProductData();
                                                                            $scope.LoadVendorDetails();
                                                                            ClearProducts();
                                                                            //$scope.VendorEdit(id);
                                                                        }
                                                                        else if (data === false) {
                                                                            alert("Cannot Delete Product as it is in use by the application");
                                                                        }
                                                                    })
                                                                }
                                                            }
                                                            //else {
                                                            //    alert("Cannot Delete Product as it is in Edit Mode by the application");
                                                            //}
                                                        };
                                                        $scope.ResetVendors = function () {
                                                            debugger
                                                            ClearVendorForm();
                                                        }

                                                        //****************** Binding Vendor  *******************************//
                                                        $scope.LoadVendorDetails = function () {
                                                            debugger;
                                                            // alert(555);
                                                            $http({
                                                                url: '/MMSMaster/vendorProductsMaster/',
                                                                method: "POST",
                                                                data: { productcode: $scope.PM.productcode, productname: $scope.PM.productname }
                                                            }).success(function (data) {
                                                                debugger;

                                                                $scope.VendorProductsDetails = data.lstvendorproducts;
                                                                $scope.OrdersDetails = data.lstOrderDetails;

                                                            }).error(function (data) {
                                                                //  alert("Error Occurred");
                                                            });
                                                        }

                                                        //****************** Clear Details Vendor *******************************//
                                                        function ClearVendorForm() {
                                                            debugger;
                                                            $scope.VP = {};
                                                            //$scope.VP.productcost = '';
                                                            //$scope.VP.vendorid = '';
                                                            if ($scope.PM.productname !== undefined) {
                                                                $scope.VP.productname = $scope.PM.productname;
                                                                $scope.VP.productcode = $scope.PM.productcode;
                                                                $scope.VP.productuom = $scope.PM.MeasuredUOMName;
                                                            }

                                                            $scope.btnProductsSave = "Save";
                                                            $scope.fmvendorproductdetails.$setPristine();
                                                            $scope.VPsubmitted = false;
                                                            $scope.btnDeletevendor = false;
                                                            $scope.VPvendorname = false;
                                                        }


                                                    });
                                                </script>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @*<script type="text/javascript" src="js/jquery-1.7.2.min.js"></script>
            <script type="text/javascript" src="js/jquery-ui-1.8.19.custom.min.js"></script>*@
        <script type="text/javascript">
            (function ($) {

                // register plugin
                var plugin = register("searchable");

                // defaults
                plugin.defaults = {
                    maxListSize: 100,
                    maxMultiMatch: 50,
                    exactMatch: false,
                    wildcards: true,
                    ignoreCase: true,
                    warnMultiMatch: "top {0} matches ...",
                    warnNoMatch: "no matches ...",
                    latency: 200,
                    zIndex: "auto"
                };

                /**
                 * Execute function
                 * element-specific code here
                 * param {Options} settings Settings
                 */
                plugin.execute = function (settings, zindex) {

                    var timer = null;
                    var searchCache = null;
                    var search = null;

                    // do not attach on IE6 or lower
                    if ($.browser.msie && parseInt(jQuery.browser.version) < 7)
                        return this;

                    // only active select elements with drop down capability
                    if (this.nodeName != "SELECT" || this.size > 1)
                        return this;

                    var self = $(this);
                    var storage = { index: -1, options: null }; // holds data for restoring
                    var idxAttr = "lang";
                    var enabled = false;

                    // detecting chrome
                    $.browser.chrome = /chrome/.test(navigator.userAgent.toLowerCase());
                    if ($.browser.chrome) $.browser.safari = false;

                    // lets you override the options
                    // inside the dom objects class property
                    // requires the jQuery metadata plugin
                    // <div class="hello {color: 'red'}">ddd</div>
                    if ($.meta) {
                        settings = $.extend({}, options, self.data());
                    }

                    // objects
                    var wrapper = $("<div/>");
                    var overlay = $("<div/>");
                    var input = $("<input/>");
                    var selector = $("<select/>");

                    // matching option items
                    var topMatchItem = $("<option>" + settings.warnMultiMatch.replace(/\{0\}/g, settings.maxMultiMatch) + "</option>").attr("disabled", "true");
                    var noMatchItem = $("<option>" + settings.warnNoMatch + "</option>").attr("disabled", "true");


                    var selectorHelper = {
                        /**
                         * Return DOM options of selector element
                         */
                        option: function (idx) {
                            return $(selector.get(0).options[idx]);
                        },
                        /**
                         * Returns the selected item of selector element
                         */
                        selected: function () {
                            return selector.find(":selected");
                        },
                        /**
                         * Get or Set the selectedIndex of the selector element
                         * param {int} idx SelectedIndex
                         */
                        selectedIndex: function (idx) {
                            if (idx > -1)
                                selector.get(0).selectedIndex = idx;
                            return selector.get(0).selectedIndex;
                        },
                        /**
                         * Resize selector depends on the parameter size
                         * param {Number} size Size
                         */
                        size: function (size) {
                            selector.attr("size", Math.max(2, Math.min(size, 20)));
                        },
                        /**
                         * Reset the entries, which can be choose to it's inital state depends on selectedIndex and maxMultiMatch
                         */
                        reset: function () {
                            // return if selector has data and stored index equal selectedIndex of source select element
                            if ((self.get(0).selectedIndex - 1) == self.data("index"))
                                return;

                            // calc start and length of iteration
                            var idx = self.get(0).selectedIndex;
                            var len = self.get(0).length;
                            var mc = Math.floor(settings.maxMultiMatch / 2);
                            var begin = Math.max(1, (idx - mc));
                            var end = Math.min(len, Math.max(settings.maxMultiMatch, (idx + mc)));
                            var si = idx - begin;

                            // clear selector select element
                            selector.empty();
                            this.size(end - begin);

                            // append options
                            for (var i = begin; i < end; i++)
                                selector.append($(self.get(0).options[i]).clone().attr(idxAttr, i - 1));

                            // append top match item if length exceeds
                            if (end > settings.maxMultiMatch)
                                selector.append(topMatchItem);

                            // set selectedIndex of selector
                            selector.get(0).selectedIndex = si;
                        }
                    };

                    // draw it
                    draw();

                    /*
                     * EVENT HANDLING
                     */
                    var suspendBlur = false;
                    overlay.mouseover(function () {
                        suspendBlur = true;
                    });
                    overlay.mouseout(function () {
                        suspendBlur = false;
                    });
                    selector.mouseover(function () {
                        suspendBlur = true;
                    });
                    selector.mouseout(function () {
                        suspendBlur = false;
                    });
                    input.click(function (e) {
                        if (!enabled)
                            enable(e, true);
                        else
                            disable(e, true);
                    });
                    input.blur(function (e) {
                        if (!suspendBlur && enabled)
                            disable(e, true);
                    });
                    self.keydown(function (e) {
                        if (e.keyCode != 9 && !e.shiftKey && !e.ctrlKey && !e.altKey)
                            input.click();
                    });
                    self.click(function (e) {
                        selector.focus();
                    });
                    selector.click(function (e) {
                        if (selectorHelper.selectedIndex() < 0)
                            return;
                        disable(e);
                    });
                    selector.focus(function (e) {
                        input.focus();
                    });
                    selector.blur(function (e) {
                        if (!suspendBlur)
                            disable(e, true);
                    });
                    selector.mousemove(function (e) {
                        // Disabled on opera because of <select> elements always return scrollTop of 0
                        // Affects up to Opera 10 beta 1, can be removed if bug is fixed
                        // http://www.greywyvern.com/code/opera/bugs/selectScrollTop
                        if ($.browser.opera && parseFloat(jQuery.browser.version) >= 9.8)
                            return true;
                        // get font-size of option
                        var fs = Math.floor(parseFloat(/([0-9\.]+)px/.exec(selectorHelper.option(0).css("font-size"))));
                        // calc line height depends on browser
                        var fsdiff = 4;
                        if ($.browser.opera)
                            fsdiff = 2.5;
                        if ($.browser.safari || $.browser.chrome)
                            fsdiff = 3;
                        fs += Math.round(fs / fsdiff);
                        // set selectedIndex depends on mouse position and line height
                        //selectorHelper.selectedIndex(Math.floor((e.pageY - selector.offset().top + this.scrollTop) / fs));
                    });

                    // toggle click event on overlay div
                    overlay.click(function (e) {
                        input.click();
                    });

                    // trigger event keyup
                    input.keyup(function (e) {

                        // break searching while using navigation keys
                        if (jQuery.inArray(e.keyCode, new Array(9, 13, 16, 33, 34, 35, 36, 38, 40)) > -1)
                            return true;

                        // set search text
                        search = $.trim(input.val().toLowerCase());

                        // if a previous timer is running, stop it
                        clearSearchTimer();

                        // start new timer
                        timer = setTimeout(searching, settings.latency);
                    });

                    // trigger keydown event for keyboard usage
                    input.keydown(function (e) {

                        // tab stop
                        if (e.keyCode == 9) {
                            disable(e);
                        }

                        // return on shift, ctrl, alt key mode
                        if (e.shiftKey || e.ctrlKey || e.altKey)
                            return;

                        // which key is pressed
                        switch (e.keyCode) {
                            case 13:  // enter
                                disable(e);
                                self.focus();
                                break;
                            case 27: // escape
                                disable(e, true);
                                self.focus();
                                break;
                            case 33: // pgup
                                if (selectorHelper.selectedIndex() - selector.attr("size") > 0) {
                                    selectorHelper.selectedIndex(selectorHelper.selectedIndex() - selector.attr("size"));
                                }
                                else {
                                    selectorHelper.selectedIndex(0);
                                }
                                synchronize();
                                break;
                            case 34: // pgdown
                                if (selectorHelper.selectedIndex() + selector.attr("size") < selector.get(0).options.length - 1) {
                                    selectorHelper.selectedIndex(selectorHelper.selectedIndex() + selector.attr("size"));
                                }
                                else {
                                    selectorHelper.selectedIndex(selector.get(0).options.length - 1);
                                }
                                synchronize();
                                break;
                            case 38: // up
                                if (selectorHelper.selectedIndex() > 0) {
                                    selectorHelper.selectedIndex(selectorHelper.selectedIndex() - 1);
                                    synchronize();
                                }
                                break;
                            case 40: // down
                                if (selectorHelper.selectedIndex() < selector.get(0).options.length - 1) {
                                    selectorHelper.selectedIndex(selectorHelper.selectedIndex() + 1);
                                    synchronize();
                                }
                                break;
                            default:
                                return true;
                        }

                        // we handled the key.stop
                        // doing anything with it!
                        return false;
                    });

                    /**
                     * Draw the needed elements
                     */
                    function draw() {

                        // fix some styles
                        self.css("text-decoration", "none");
                        self.width(self.outerWidth());
                        self.height(self.outerHeight());

                        // wrapper styles
                        wrapper.css("position", "relative");
                        wrapper.css("width", self.outerWidth());
                        // relative div needs an z-index (related to IE z-index bug)
                        if ($.browser.msie)
                            wrapper.css("z-index", zindex);

                        // overlay div to block events of source select element
                        overlay.css({
                            "position": "absolute",
                            "top": 0,
                            "left": 0,
                            "width": self.outerWidth(),
                            "height": self.outerHeight(),
                            "background-color": "#FFFFFF",
                            "opacity": "0.01"
                        });

                        // overlay text field for searching capability
                        input.attr("type", "text");
                        input.hide();
                        input.height(self.outerHeight());

                        // default styles for text field
                        input.css({
                            "position": "absolute",
                            "top": 0,
                            "left": 0,
                            "margin": "0px",
                            "padding": "0px",
                            "outline-style": "none",
                            "border-style": "solid",
                            "border-bottom-style": "none",
                            "border-color": "transparent",
                            "background-color": "transparent"
                            //                "background-color": "red"
                        });

                        // copy selected styles to text field
                        var sty = new Array();
                        sty.push("border-left-width");
                        sty.push("border-top-width");
                        //sty.push("font-family");
                        sty.push("font-size");
                        sty.push("font-stretch");
                        sty.push("font-variant");
                        sty.push("font-weight");
                        sty.push("color");
                        sty.push("text-align");
                        sty.push("text-indent");
                        sty.push("text-shadow");
                        sty.push("text-transform");
                        sty.push("padding-left");
                        sty.push("padding-top");
                        for (var i = 0; i < sty.length; i++)
                            input.css(sty[i], self.css(sty[i]));

                        // adjust search text field
                        // IE7
                        if ($.browser.msie && parseInt(jQuery.browser.version) < 8) {
                            input.css("padding", "0px");
                            input.css("padding-left", "3px");
                            input.css("border-left-width", "2px");
                            input.css("border-top-width", "3px");
                        }
                            // chrome
                        else if ($.browser.chrome) {
                            input.height(self.innerHeight());
                            input.css("text-transform", "none");
                            input.css("padding-left", parseFloatPx(input.css("padding-left")) + 3);
                            input.css("padding-top", 2);
                        }
                            // safari
                        else if ($.browser.safari) {
                            input.height(self.innerHeight());
                            input.css("padding-top", 2);
                            input.css("padding-left", 3);
                            input.css("text-transform", "none");
                        }
                            // opera
                        else if ($.browser.opera) {
                            input.height(self.innerHeight());
                            var pl = parseFloatPx(self.css("padding-left"));
                            input.css("padding-left", pl == 1 ? pl + 1 : pl);
                            input.css("padding-top", 0);
                        }
                        else if ($.browser.mozilla) {
                            input.css("padding-top", "0px");
                            input.css("border-top", "0px");
                            input.css("padding-left", parseFloatPx(self.css("padding-left")) + 3);
                        }
                            // all other browsers
                        else {
                            input.css("padding-left", parseFloatPx(self.css("padding-left")) + 3);
                            input.css("padding-top", parseFloatPx(self.css("padding-top")) + 1);
                        }

                        // adjust width of search field
                        var offset = parseFloatPx(self.css("padding-left")) + parseFloatPx(self.css("padding-right")) +
                        parseFloatPx(self.css("border-left-width")) + parseFloatPx(self.css("border-left-width")) + 23;
                        input.width(self.outerWidth() - offset);

                        // store css width of source select object then set width
                        // to auto to obtain the maximum width depends on the longest entry.
                        // this is nessesary to set the width of the selector, because min-width
                        // do not work in all browser.
                        var w = self.css("width");
                        var ow = self.outerWidth();
                        self.css("width", "auto");
                        ow = ow > self.outerWidth() ? ow : self.outerWidth();
                        self.css("width", w);

                        // entries selector replacement
                        selector.hide();
                        selectorHelper.size(self.get(0).length);
                        selector.css({
                            "position": "absolute",
                            "top": self.outerHeight(),
                            "left": 0,
                            "width": ow,
                            "border": "1px solid #333",
                            "font-weight": "normal",
                            "padding": 0,
                            "background-color": self.css("background-color"),
                            "text-transform": self.css("text-transform")
                        });

                        // z-index handling
                        var zIndex = /^\d+$/.test(self.css("z-index")) ? self.css("z-index") : 1;
                        // if z-index option is defined, use it instead of select element z-index
                        if (settings.zIndex && /^\d+$/.test(settings.zIndex))
                            zIndex = settings.zIndex;
                        overlay.css("z-index", (zIndex).toString(10));
                        input.css("z-index", (zIndex + 1).toString(10));
                        selector.css("z-index", (zIndex + 2).toString(10));

                        // append to container
                        self.wrap(wrapper);
                        self.after(overlay);
                        self.after(input);
                        self.after(selector);
                    };

                    /**
                     * Enable the search facilities
                     *
                     * param {Object} e Event
                     * param {boolean} s Show selector
                     * param {boolean} v Verbose enabling
                     */
                    function enable(e, s, v) {

                        // exit event on disabled select element
                        if (self.attr("disabled"))
                            return false;

                        // prepend empty option
                        self.prepend("<option />");

                        // set state to enabled
                        if (typeof v == "undefined")
                            enabled = !enabled;

                        // reset selector
                        selectorHelper.reset();

                        // synchronize select and dropdown replacement
                        synchronize();

                        // store search result
                        store();

                        // show selector
                        if (s)
                            selector.show();

                        // show search field
                        input.show();
                        input.focus();
                        input.select();

                        // select empty option
                        self.get(0).selectedIndex = 0;

                        if (typeof e != "undefined")
                            e.stopPropagation();
                    };

                    /**
                     * Disable the search facilities
                     *
                     * param {Object} e Event
                     * param {boolean} rs Restore last results
                     */
                    function disable(e, rs) {

                        // set state to disabled
                        enabled = false;

                        // remove empty option
                        self.find(":first").remove();

                        // clear running search timer
                        clearSearchTimer();

                        // hide search field and selector
                        input.hide();
                        selector.hide();

                        // restore last results
                        if (typeof rs != "undefined")
                            restore();

                        // populate changes
                        populate();

                        if (typeof e != "undefined")
                            e.stopPropagation();
                    };

                    /**
                     * Clears running search timer
                     */
                    function clearSearchTimer() {
                        // clear running timer
                        if (timer != null)
                            clearTimeout(timer);
                    };

                    /**
                     * Populate changes to select element
                     */
                    function populate() {
                        // invalid selectedIndex or disabled elements do not be populate
                        if (selectorHelper.selectedIndex() < 0 || selectorHelper.selected().get(0).disabled)
                            return;

                        // store selectedIndex
                        self.get(0).selectedIndex = parseInt(selector.find(":selected").attr(idxAttr));

                        // trigger change event
                        self.change();

                        // store selected index
                        self.data("index", new Number(self.get(0).selectedIndex));
                    };

                    /**
                     * Synchronize selected item on dropdown replacement with source select element
                     */
                    function synchronize() {
                        if (selectorHelper.selectedIndex() > -1 && !selectorHelper.selected().get(0).disabled)
                            input.val(selector.find(":selected").text());
                        else
                            input.val(self.find(":selected").text());
                    };

                    /**
                     * Stores last results of selector
                     */
                    function store() {
                        storage.index = selectorHelper.selectedIndex();
                        storage.options = new Array();
                        for (var i = 0; i < selector.get(0).options.length; i++)
                            storage.options.push(selector.get(0).options[i]);
                    };

                    /**
                     * Restores last results of selector previously stored by store function
                     */
                    function restore() {
                        selector.empty();
                        for (var i = 0; i < storage.options.length; i++)
                            selector.append(storage.options[i]);
                        selectorHelper.selectedIndex(storage.index);
                        selectorHelper.size(storage.options.length);
                    };

                    /**
                     * Escape regular expression string
                     *
                     * param str String
                     * return escaped regexp string
                     */
                    function escapeRegExp(str) {
                        var specials = ["/", ".", "*", "+", "?", "|", "(", ")", "[", "]", "{", "}", "\\", "^", "$"];
                        var regexp = new RegExp("(\\" + specials.join("|\\") + ")", "g");
                        return str.replace(regexp, "\\$1");
                    };

                    /**
                     * The actual searching gets done here
                     */
                    function searching() {
                        if (searchCache == search) { // no change ...
                            timer = null;
                            return;
                        }

                        var matches = 0;
                        searchCache = search;
                        selector.hide();
                        selector.empty();

                        // escape regexp characters
                        var regexp = escapeRegExp(search);
                        // exact match
                        if (settings.exactMatch)
                            regexp = "^" + regexp;
                        // wildcard support
                        if (settings.wildcards) {
                            regexp = regexp.replace(/\\\*/g, ".*");
                            regexp = regexp.replace(/\\\?/g, ".");
                        }
                        // ignore case sensitive
                        var flags = null;
                        if (settings.ignoreCase)
                            flags = "i";

                        // RegExp object
                        search = new RegExp(regexp, flags);

                        // for each item in list
                        for (var i = 1; i < self.get(0).length && matches < settings.maxMultiMatch; i++) {
                            // search
                            if (search.length == 0 || search.test(self.get(0).options[i].text)) {
                                var opt = $(self.get(0).options[i]).clone().attr(idxAttr, i - 1);
                                if (self.data("index") == i)
                                    opt.text(self.data("text"));
                                selector.append(opt);
                                matches++;
                            }
                        }

                        // result actions
                        if (matches >= 1) {
                            selectorHelper.selectedIndex(0);
                        }
                        else if (matches == 0) {
                            selector.append(noMatchItem);
                        }

                        // append top match item if matches exceeds maxMultiMatch
                        if (matches >= settings.maxMultiMatch) {
                            selector.append(topMatchItem);
                        }

                        // resize selector
                        selectorHelper.size(matches);
                        selector.show();
                        timer = null;
                    };

                    /**
                     * Parse a given pixel size value to a float value
                     * param value Pixel size value
                     */
                    function parseFloatPx(value) {
                        try {
                            value = parseFloat(value.replace(/[\s]*px/, ""));
                            if (!isNaN(value))
                                return value;
                        }
                        catch (e) { }
                        return 0;
                    };

                    return;
                };

                /**
                 * Register plugin under given namespace
                 *
                 * Plugin Pattern informations
                 * The function creates the namespace under jQuery
                 * and bind the function to execute the plugin code.
                 * The plugin code goes to the plugin.execute function.
                 * The defaults can setup under plugin.defaults.
                 *
                 * param {String} nsp Namespace for the plugin
                 * return {Object} Plugin object
                 */
                function register(nsp) {

                    // init plugin namespace
                    var plugin = $[nsp] = {};

                    // bind function to jQuery fn object
                    $.fn[nsp] = function (settings) {
                        // extend default settings
                        settings = $.extend(plugin.defaults, settings);

                        var elmSize = this.size();
                        return this.each(function (index) {
                            plugin.execute.call(this, settings, elmSize - index);
                        });
                    };

                    return plugin;
                };

            })(jQuery);
        </script>

        <script>
            $(function () {
                $('.Search-Select').searchable();
                //$("#Date").datepicker('setDate', 'today');
                //$("#Date").datepicker({
                //    endDate: new Date()
                //});
                $('#Date').datepicker('setEndDate', 'today');
                //$('#DeliveredBefore').datepicker('setStartDate', 'today');
                $("#invoicedate").datepicker('setDate', 'today');
                //$("#invoicedate").datepicker({
                //    endDate: '+0d'
                //});
            });
        </script>
        <style type="text/css">
            .ui-state-error {
                background-color: #f38686;
            }

            .btn-grid {
                color: rgb(29,120,139);
            }
        </style>


        <script type="text/javascript">
            var appElement = document.querySelector('[ ng-controller=GrnController]');
            function Search() {
                debugger;
                var $scope = angular.element(appElement).scope();
                debugger;
                if ($scope.GR.grntype === "PO") {
                    JqCustomSearch($("#globalSearchText").val().toUpperCase(), $("#grdgrnpo"));
                }

                else if ($scope.GR.grntype == "DIRECT") {
                    JqCustomSearch($("#globalSearchText1").val().toUpperCase(), $("#grdgrndirect"));
                }
                else if ($scope.GR.grntype == "MODIFY") {
                    JqCustomSearch($("#globalSearchText").val().toUpperCase(), $("#grdgrnpo"));
                }
                else if ($scope.GR.grntype == "REORDER") {
                    JqCustomSearch($("#globalSearchText1").val().toUpperCase(), $("#grdgrndirect"));
                }

            }



            function Delete(row) {
                debugger;
                var appElement = document.querySelector('[ ng-controller=GrnController]');
                var $scope = angular.element(appElement).scope();
                var ans = confirm("Are You Sure? Do You Want To Delete?");
                if (ans) {
                    $('#grdgrndirect').jqGrid('delRowData', row);
                    alert("Goods Received Note Details Deleted Successfully");
                    $scope.TX.DiscountFlatPercentage = "";
                    $scope.TX.DiscountType = "";

                    $scope.TX.DiscountValue = "";
                    $scope.TX.TransportCharges = "";
                    $scope.TX.DiscountValue.$valid = true;
                    $scope.TX.DiscountFlatPercentage.$valid = true;

                    BasicCalculations();
                    $scope.DiscountCalculations();
                    $scope.ExiseCalculations();
                    $scope.VatorCstCalculations();
                    $scope.TotalCalculations();
                    $scope.$apply();
                }
            }


            function edit(row) {
                debugger;
                //var rowdata = jQuery('#grdgrn').jqGrid('getRowData', row);
                var $http = angular.element(appElement).injector().get('$http');
                var $scope = angular.element(appElement).scope();
                var rowdata = jQuery("#grdgrnpo").jqGrid('getRowData', row);
                //var rowdata = jQuery('#grdgrn').jqGrid('getRowData', row);
                var copy = Object.assign({}, rowdata);
                $http.post('/MMSMaster/CheckCity', rowdata).success(function (data) {

                    debugger;
                    if (data == 1) {
                        $scope.btnSave = "Update";
                        $scope.CD = copy;
                        $scope.CountryChange();
                        $scope.$apply();
                    }
                    else {
                        alert("Cannot Delete City as it is in use by the application");
                    }
                })

            }

            function POAddProducts() {

                $('#myModal2').modal('show');

                //alert("ok");
            }






            function POGridConversionValue(row) {
                debugger;
                var $scope = angular.element(appElement).scope();
                var l = document.getElementById('uomConversionValuePopUp');
                var strgrnuom = '';
                var strproductuom = '';
                if (row == '') {
                    strproductuom = $scope.GD.orderuom;
                    var Product = $scope.GD.productname;
                    strgrnuom = $("#UOM option:selected").text();
                    if (strgrnuom != strproductuom) {
                        if (Product != undefined && Product != '' && Product != 'Select Product') {
                            if (strgrnuom != undefined && strgrnuom != '' && strgrnuom != 'Select UOM') {
                                $('#ConversionValueRowID').val('');
                                $('#ConversionValueProductname').val($scope.GD.productname);
                                $('#ConversionValueProductUOM').val($scope.GD.orderuom);
                                $('#ConversionValueGRNUOM').val(strgrnuom);
                                $('#MainConversionValue').val('');
                                l.click();
                            } else {
                                alert('Please Select GRN UOM!');
                            }
                        } else {
                            alert('Please Select Prodcut!');
                        }
                    }
                } else {
                    var rowdata = jQuery("#grdgrnpo").jqGrid('getRowData', row);
                    strgrnuom = $("#" + row + "_grnuom  option:selected").text();
                    if (rowdata.orderuom != strgrnuom) {
                        //$('#MainConversionValue').val(rowdata.productname);
                        if (strgrnuom != undefined && strgrnuom != '' && strgrnuom != 'SELECT') {
                            $('#ConversionValueRowID').val(row);
                            $('#ConversionValueProductname').val(rowdata.productname);
                            $('#ConversionValueProductUOM').val(rowdata.orderuom);
                            $('#ConversionValueGRNUOM').val(strgrnuom);
                            $('#MainConversionValue').val('');
                            l.click();
                        } else {
                            alert('Please Select GRN UOM in Grid!');
                        }
                    }
                }
                //var uomValue = prompt("Please enter your name", "");
                //if (uomValue != null) {
                //    if (!isNaN(parseFloat(uomValue))) {
                //    } else {
                //        alert('Please Enter Conversion Value');
                //        POGridConversionValue(row);
                //    }
                //}
                //else {
                //    alert('Please Enter Conversion Value');
                //    POGridConversionValue(row, Form);
                //}
            }
            $("#submit_btn").click(function () {
                debugger;
                var $scope = angular.element(appElement).scope();
                var row = $('#ConversionValueRowID').val();
                var strppproductname = $('#ConversionValueProductname').val();
                var struomValue = $('#MainConversionValue').val();
                var res = '', strmsg = '';
                if (strppproductname != '') {
                    if (struomValue != undefined && struomValue != '') {
                        if (!isNaN(struomValue)) {
                            res = '<option role="option" value="' + parseFloat(struomValue).toFixed(4) + '">' + parseFloat(struomValue).toFixed(4) + '</option>';
                            if (row == '') {
                                if (!CheckOptions('uomconversionvalue', parseFloat(struomValue).toFixed(4))) {
                                    $("#uomconversionvalue").append(res);
                                    //$("#uomconversionvalue").val('');
                                    //$("#uomconversionvalue").val(parseFloat(struomValue).toFixed(4));
                                    //$scope.GD.uomconversionvalue = parseFloat(struomValue).toFixed(4);
                                    $("#uomconversionvalue").val('SELECT');
                                    strmsg = 'Conversion Value Added Succesfully!';
                                } else {
                                    strmsg = 'Uom Conversion Value Already Exists!';
                                }
                            } else if (row != '') {
                                if (!CheckOptions('' + row + '_exuom', parseFloat(struomValue).toFixed(4))) {
                                    $("#" + row + "_exuom").append(res);
                                    //$("#" + row + "_exuom").val('');
                                    $("#" + row + "_exuom").val(parseFloat(struomValue).toFixed(4));
                                    strmsg = 'Conversion Value Added Succesfully!'
                                } else {
                                    strmsg = 'Uom Conversion Value Already Exists!';
                                }
                            }
                            $('#ConversionValueRowID').val('');
                            $('#ConversionValueProductname').val('');
                            $('#ConversionValueProductUOM').val('');
                            $('#ConversionValueGRNUOM').val('');
                            $('#MainConversionValue').val('');
                            $('#myModal').modal('hide');
                            alert(strmsg);
                        } else {
                            alert('Please Enter Numbers Only!');
                        }
                    }
                    else {
                        alert('Please Enter ConversionValue!');
                    }
                }
            });
            function CheckOptions(id, strvalue) {
                var IsExists = false;
                var x = document.getElementById("" + id + "");
                for (var i = 0; i < x.length; i++) {
                    if (x.options[i].text === strvalue) {
                        IsExists = true;
                    }
                }
                return IsExists;
            }
            $("#MainConversionValue").keydown(function (e) {
                debugger;
                if (e.target.value.split('.')[1].length == 4) {
                    e.preventDefault();
                }
                // Allow: backspace, delete, tab, escape, enter and .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                    // Allow: Ctrl+A
                    (e.keyCode == 65 && e.ctrlKey === true) ||
                    // Allow: Ctrl+C
                    (e.keyCode == 67 && e.ctrlKey === true) ||
                    // Allow: Ctrl+X
                    (e.keyCode == 88 && e.ctrlKey === true) ||
                    // Allow: home, end, left, right
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });
        </script>
        <script type="text/javascript">
            var app = angular.module('RMS');
            app.directive('kitConversionvalue', function () {
                return {
                    require: '?ngModel',
                    link: function (scope, element, attrs, ngModelCtrl) {
                        ;
                        if (!ngModelCtrl) {
                            return;
                        }
                        ngModelCtrl.$parsers.push(function (val) {
                            debugger;
                            var length = parseInt(element[0].maxLength) - 3;
                            if (angular.isUndefined(val)) {
                                var val = '';
                            }
                            var clean = val.replace(/[^0-9\.]/g, '');
                            var decimalCheck = clean.split('.');

                            if (!angular.isUndefined(decimalCheck[1])) {
                                decimalCheck[1] = decimalCheck[1].slice(0, 4);
                                clean = decimalCheck[0] + '.' + decimalCheck[1];
                            }
                            if (decimalCheck.length == 1) {
                                if (decimalCheck[0].length > length) {
                                    clean = decimalCheck[0].substring(0, length);
                                }
                            }
                            if (val !== clean) {
                                ngModelCtrl.$setViewValue(clean);
                                ngModelCtrl.$render();
                            }
                            return clean;
                        });
                        element.bind('keypress', function (event) {
                            if (event.keyCode === 32) {
                                event.preventDefault();
                            }
                        });
                        element.bind('blur', function (event) {

                            var el = element[0].value.split('.');
                            var fval = parseFloat(element[0].value);
                            if (fval <= 0) {
                                fval = null;
                            }
                            else if (el.length == 2) {
                                if (el[1] == "") {
                                    fval = el[0];
                                }
                            }

                            ngModelCtrl.$setViewValue(fval);
                            ngModelCtrl.$render();
                            scope.$apply();
                        });
                    }

                };
            }); // Conversion Value Format
            app.controller('GrnController', function ($scope, $http, $rootScope) {
                debugger;
                $scope.TX = {};
                $scope.GR = {};
                $scope.submitted = false;
                $scope.isFormValid = false;
                $scope.btnSave = "Save";
                $rootScope.FormName = "GRN";
                $scope.grdedit = false;
                $scope.ischange = true;
                $rootScope.ModuleName = "Transactions";
                $scope.poShow = false;
                $scope.isTaxSubmitted = false;
                $scope.$watch('Grnfrm.$valid', function (newValue) {
                    $scope.isFormValid = newValue;
                });
                $scope.$watch('GrnDirectfrm.$valid', function (newValue) {
                    $scope.isAddFormValid = newValue;
                });
                $scope.$watch('frmtx.$valid', function (newValue) {
                    $scope.isTaxFormValid = newValue;
                });

                $scope.DatepickerEnableStatus = function () {
                    $http({
                        url: '/MMSTransaction/GetDatepickerEnableStatus/',
                        method: "get"
                    }).success(function (data) {
                        if (data != null) {
                            if (eval('(' + data.Data + ')') === "Y") {
                                $scope.DateEnableStatus = false;
                            } else {
                                $scope.DateEnableStatus = true;
                            }
                        }
                    });
                }
                //****************** TAX FORM  *******************************//

                $scope.clearchange = function () {

                    // $scope.GR.vendorid = '';

                    $scope.GR.GRNNO = '';
                    $scope.GR.invoiceno = '';

                    $scope.GR.receivedid = '';

                    $scope.GR.TermsandConditions = '';

                    $scope.TX.BasicAmount = '';
                    $scope.TX.DiscountType = '';

                    $scope.TX.DiscountFlatPercentage = '';

                    $scope.TX.DiscountValue = '';

                    $scope.TX.TransportCharges = '';

                    $scope.TX.TotalAmount = '';
                }
                $scope.discounttypeChange = function () {
                    debugger;
                    DiscountClear();
                    var strDiscountType = $scope.TX.DiscountType;
                    if (strDiscountType === "FLAT" || strDiscountType === "PERCENTAGE") {
                        $scope.hddiscount = true;
                        $scope.ischange = false;
                    } else {
                        $scope.hddiscount = false;
                        $scope.ischange = true;
                    }
                    $scope.DiscountCalculations();
                    $scope.ExiseCalculations();
                    $scope.VatorCstCalculations();
                }//Discount Type  Change Calculations

                $scope.taxtypeChange = function () {
                    debugger;
                    ExciseTaxClear();
                    VatTaxClear();
                    if ($scope.GD.taxtype === "EXCISE") {
                        $scope.hdEXCISE = true;
                        $scope.hdVATCST = false;
                    } else if ($scope.GD.taxtype === "VAT") {
                        $scope.hdEXCISE = false;
                        $scope.hdVATCST = true;
                    } else if ($scope.GD.taxtype === "BOTH") {
                        $scope.hdVATCST = true;
                        $scope.hdEXCISE = true;
                    } else {
                        $scope.hdEXCISE = false;
                        $scope.hdVATCST = false;
                    }
                    $scope.$apply();
                }//Tax Includings(VAT && Excise) Credit Change

                $scope.vatorcstChange = function () {
                    debugger;
                    $scope.hdtaxtypevatorcst = true;
                    if ($scope.GD.vatorcst === "VAT") {
                        var ROWS = ["0", "5", "5.5", "14.5"];
                        $scope.Percentages = ROWS;
                    } else if ($scope.GD.vatorcst === "CST") {
                        var ROWS = ["2", "5.5", "2.5", "12.5"];
                        $scope.Percentages = ROWS;
                    } else {
                        $scope.hdtaxtypevatorcst = false;
                        $scope.Percentages = [];
                    }
                } //Tax  Type (VAT/CST) Credit Change

                function ExciseTaxClear() {
                    $scope.GD.TaxExcisePercentage = '';
                    $scope.GD.TaxExciseAmount = 0;
                    $scope.GD.TaxCESSPercentage = '';
                    $scope.GD.TaxCESSAmount = 0;
                    $scope.GD.TaxSHCESSPercentage = '';
                    $scope.GD.TaxSHCESSAmount = 0;

                    $scope.GD.TaxExcisePercentage.$valid = true;
                    $scope.GD.TaxExciseAmount.$valid = true;
                    $scope.GD.TaxCESSPercentage.$valid = true;
                    $scope.GD.TaxCESSAmount.$valid = true;
                    $scope.GD.TaxSHCESSPercentage.$valid = true;
                    $scope.GD.TaxSHCESSAmount.$valid = true;
                    //$scope.TX.TaxExcisePercentage,
                    //$scope.TX.TaxExciseAmount,
                    //$scope.TX.TaxCESSPercentage,
                    //$scope.TX.TaxCESSAmount,

                    //$scope.TX.TaxSHCESSPercentage,
                    //$scope.TX.TaxSHCESSAmount,
                    //$scope.TX.TransportCharges,
                    //$scope.TX.vatorcst,
                    //$scope.TX.taxvatcst,
                    //$scope.TX.TaxvatorcstAmount
                    $scope.TotalCalculations();
                }// Excise Clear

                function VatTaxClear() {
                    $scope.GD.vatorcst = '';
                    $scope.GD.taxvatcst = '';
                    $scope.GD.TaxvatorcstAmount = 0;
                    $scope.Percentages = [];
                    $scope.GD.vatorcst.$valid = true;
                    $scope.GD.taxvatcst.$valid = true;
                    $scope.GD.TaxvatorcstAmount.$valid = true;
                    $scope.TotalCalculations();
                }   // Vat /CST Clear

                function DiscountClear() {
                    $scope.TX.DiscountValue = '';
                    $scope.TX.DiscountFlatPercentage = '';
                    $scope.TX.DiscountValue.$valid = true;
                    $scope.TX.DiscountFlatPercentage.$valid = true;
                    $scope.TotalCalculations();
                } // Discount Clear

                $scope.TotalCalculations = function () {
                    debugger;
                    //TX.DiscountType, TX.DiscountFlatAmount, TX.DiscountPercentage, TX.taxtype, TX.TaxExcisePercentage,
                    //TX.TaxExciseAmount, TX.TaxCESSPercentage, TX.TaxCESSAmount,TX.TransportCharges,
                    //TX.TaxSHCESSPercentage, TX.TaxSHCESSAmount, TX.vatorcst, TX.taxvatcst, TX.TaxvatorcstAmount
                    var strBasicAmount = $scope.TX.BasicAmount || 0;
                    var strDiscountFlatAmount = 0;
                    var strDiscountType = $scope.TX.DiscountType;
                    if (parseFloat(strBasicAmount) > 0) {
                        var strTaxExciseAmount = $scope.TX.totalexcise || 0;
                        var strTaxCESSAmount = $scope.TX.totalcess || 0;
                        var strTaxSHCESSAmount = $scope.TX.totalshcess || 0;
                        var strTaxvatorcstAmount = $scope.TX.totalvatorcst || 0;
                        var strTransportCharges = $scope.TX.TransportCharges || 0;
                        var strtaxtype = $scope.TX.taxtype;
                        var disva = $scope.TX.DiscountFlatPercentage || 0;
                        var TotalAmount = 0;
                        debugger;
                        if (strDiscountType === "PERCENTAGE") {

                            if (disva != 0) {
                                strDiscountFlatAmount = (parseFloat(strBasicAmount) * (parseFloat($scope.TX.DiscountFlatPercentage) / 100));
                            }
                            //
                            // strDiscountFlatAmount = 10;
                        } else if (strDiscountType === "FLAT") {
                            strDiscountFlatAmount = $scope.TX.DiscountFlatPercentage || 0;
                        }
                        //if (strtaxtype !== "NONE") {
                        //    TotalAmount = parseFloat(strBasicAmount) - parseFloat(strDiscountFlatAmount) + parseFloat(strTransportCharges);
                        //    if (strtaxtype === "EXCISE" || strtaxtype === "BOTH") {
                        //        TotalAmount = TotalAmount + parseFloat(strTaxExciseAmount) + parseFloat(strTaxCESSAmount) + parseFloat(strTaxSHCESSAmount);
                        //    }
                        //    if (strtaxtype === "VAT" || strtaxtype === "BOTH") {
                        //        TotalAmount = TotalAmount + parseFloat(strTaxvatorcstAmount);
                        //    }

                        //} else {
                        //    TotalAmount = parseFloat(strBasicAmount) - parseFloat(strDiscountFlatAmount) + parseFloat(strTransportCharges) + parseFloat(strTaxExciseAmount) + parseFloat(strTaxCESSAmount) + parseFloat(strTaxSHCESSAmount);
                        //}
                        //$scope.$apply();
                        TotalAmount = parseFloat(strBasicAmount) - parseFloat(strDiscountFlatAmount) + parseFloat(strTransportCharges) + parseFloat(strTaxExciseAmount) + parseFloat(strTaxCESSAmount) + parseFloat(strTaxSHCESSAmount) + parseFloat(strTaxvatorcstAmount);

                        $scope.TX.TotalAmount = Math.round(parseFloat(TotalAmount) * 100) / 100;
                    } else {
                        $scope.TX.TotalAmount = 0;
                    }
                } // Total Amount Calculations

                $scope.ExiseCalculations = function () {
                    debugger;
                    //if ($scope.GR.grntype == "DIRECT")
                    //{
                    //    var BasicAmount = $scope.GD.productamount || 0;
                    //}
                    //else
                    //{
                    //    var BasicAmount = 0;
                    //}
                    var BasicAmount = $scope.GD.productamount || 0;
                    if (parseFloat(BasicAmount) > 0) {
                        //             Excise TAX  Details             //
                        var strTaxType = $scope.GD.taxtype;

                        var DiscountAmount = 0;
                        //var strDiscountType = $scope.GD.DiscountType;
                        var strTaxExcisePercentage = $scope.GD.TaxExcisePercentage || 0;
                        var strTaxExciseAmount = $scope.GD.TaxExciseAmount || 0;
                        var strTaxCESSPercentage = $scope.GD.TaxCESSPercentage;
                        var strTaxCESSAmount = $scope.GD.TaxCESSAmount || 0;
                        var strTaxSHCESSPercentage = $scope.GD.TaxSHCESSPercentage;
                        var strTaxSHCESSAmount = $scope.GD.TaxSHCESSAmount || 0;
                        //             Excise TAX  Details             //
                        //if (strDiscountType === "PERCENTAGE") {
                        //    DiscountAmount = (parseFloat(BasicAmount) * (parseFloat($scope.TX.DiscountFlatPercentage) / 100));
                        //} else if (strDiscountType === "FLAT") {
                        //    DiscountAmount = $scope.TX.DiscountFlatPercentage || 0;
                        //}
                        if (strTaxType === "EXCISE" || strTaxType === "BOTH") {
                            if (strTaxExcisePercentage !== undefined && strTaxExcisePercentage != "Select") {
                                strTaxExciseAmount = (parseFloat(BasicAmount) - parseFloat(DiscountAmount)) * (parseFloat(strTaxExcisePercentage) / 100);
                                $scope.GD.TaxExciseAmount = Math.round(parseFloat(strTaxExciseAmount) * 100) / 100;
                            }
                            if (strTaxExcisePercentage != "Select") {
                                if (strTaxCESSPercentage !== undefined) {
                                    strTaxCESSAmount = parseFloat(strTaxExciseAmount) * (parseFloat(strTaxCESSPercentage) / 100);
                                    $scope.GD.TaxCESSAmount = Math.round(parseFloat(strTaxCESSAmount) * 100) / 100;
                                }
                                if (strTaxCESSPercentage !== undefined) {
                                    strTaxSHCESSAmount = parseFloat(strTaxExciseAmount) * (parseFloat(strTaxSHCESSPercentage) / 100);
                                    $scope.GD.TaxSHCESSAmount = Math.round(parseFloat(strTaxSHCESSAmount) * 100) / 100;
                                }
                            } else {
                                $scope.GD.TaxExciseAmount = '';
                                $scope.GD.TaxCESSPercentage = '';
                                $scope.GD.TaxSHCESSPercentage = '';
                                $scope.GD.TaxCESSPercentage.$valid = true;
                                $scope.GD.TaxSHCESSPercentage.$valid = true;
                            }
                        } else {
                            $scope.GD.TaxExcisePercentage = 0;
                            $scope.GD.TaxExciseAmount = 0;
                            $scope.GD.TaxCESSPercentage = 0;
                            $scope.GD.TaxCESSAmount = 0;
                            $scope.GD.TaxSHCESSPercentage = 0;
                            $scope.GD.TaxSHCESSAmount = 0;
                        }
                        //$scope.$apply();
                        $scope.TotalCalculations();
                    } else {
                        $scope.GD.TaxExciseAmount = 0;
                        $scope.GD.TaxCESSAmount = 0;
                        $scope.GD.TaxSHCESSAmount = 0;
                    }
                } // Excise Amount Calculations

                $scope.VatorCstCalculations = function () {
                    debugger;
                    var BasicAmount = $scope.GD.productamount || 0;
                    if (parseFloat(BasicAmount) > 0) {
                        //             VAT OR CST  Details             //
                        var strTaxType = $scope.GD.taxtype;
                        var strvatorcst = $scope.GD.vatorcst || 0;
                        var strtaxvatcst = $scope.GD.taxvatcst;
                        var strTaxvatorcstAmount = $scope.GD.TaxvatorcstAmount || 0;
                        //             VAT OR CST  Details             //
                        var VatAmount = 0;
                        var DiscountAmount = 0;

                        if (strTaxType === "VAT" || strTaxType === "BOTH") {
                            if (strtaxvatcst !== undefined) {
                                strTaxvatorcstAmount = (parseFloat(BasicAmount) - parseFloat(DiscountAmount)) * parseFloat(strtaxvatcst) / 100;
                                $scope.GD.TaxvatorcstAmount = Math.round(parseFloat(strTaxvatorcstAmount) * 100) / 100;
                            }
                        } else {
                            $scope.GD.vatorcst = 0;
                            $scope.GD.taxvatcst = 0;
                            $scope.GD.TaxvatorcstAmount = 0;
                        }
                        //$scope.$apply();
                        $scope.TotalCalculations();
                    } else {
                        $scope.GD.vatorcst = 0;
                        $scope.GD.taxvatcst = 0;
                        $scope.GD.TaxvatorcstAmount = 0;
                    }
                } // Vat/Cst Amount Calculations


                $scope.BasicCalculationsModify = function () {


                    var GRNTYPE = $scope.GR.grntype;
                    var BasicAmount = 0;

                    Grid_data = $('#grdgrndirect').jqGrid('getRowData');
                    var grdlen = Grid_data.length;
                    for (var i = 0; i < grdlen; i++) {
                        var receivedqty = Grid_data[i].receivedqty;
                        var grnrate = Grid_data[i].grnrate;

                        BasicAmount = parseFloat(BasicAmount) + (parseFloat(receivedqty) * parseFloat(grnrate));


                    }

                    $scope.TX.BasicAmount = BasicAmount;// Math.round((parseFloat(BasicAmount) - parseFloat(Totalprdtdiscount)) * 100) / 100;
                    // $scope.TX.totalvatorcst = Math.round(parseFloat(Totalvatorcst) * 100) / 100;
                    //  $scope.TX.totalcess = Math.round(parseFloat(Totalcess) * 100) / 100;
                    //   $scope.TX.totalexcise = Math.round(parseFloat(Totalexcise) * 100) / 100;
                    //  $scope.TX.totalshcess = Math.round(parseFloat(TotalShcess) * 100) / 100;
                    //  $scope.TX.totalproductdiscount = Math.round(parseFloat(Totalprdtdiscount) * 100) / 100;
                    $scope.TotalCalculations();

                }


                BasicCalculations = function () {
                    debugger;
                    //             BASIC DETAILS             //
                    var GRNTYPE = $scope.GR.grntype;
                    var BasicAmount = 0;
                    var Totalvatorcst = 0;
                    var Totalexcise = 0;
                    var Totalcess = 0;
                    var TotalShcess = 0;
                    var Totalprdtdiscount = 0;
                    if (GRNTYPE === "DIRECT") {
                        Grid_data = $('#grdgrndirect').jqGrid('getRowData');
                        //var Rate = $scope.GD.grnrate || 0;
                        //var Qty = $scope.GD.receivedqty || 0;
                        //BasicAmount = parseFloat(Rate) * parseFloat(Qty);
                    } else if (GRNTYPE === "MODIFY") {
                        Grid_data = $('#grdgrnpo').jqGrid('getRowData');
                        $scope.grdedit = true;
                    }
                    else if (GRNTYPE === "REORDER") {
                        Grid_data = $('#grdgrndirect').jqGrid('getRowData');
                    }
                    else if (GRNTYPE === "PO") {
                        Grid_data = $('#grdgrnpo').jqGrid('getRowData');
                    }

                    var grdlen = Grid_data.length;
                    for (var i = 0; i < grdlen; i++) {
                        var receivedqty = Grid_data[i].receivedqty;
                        var grnrate = Grid_data[i].grnrate;
                        var returnqty = Grid_data[i].returnqty;
                        var orderedqty = Grid_data[i].orderedqty;
                        var strvatorcst = Grid_data[i].TaxvatorcstAmount;
                        var strexcise = Grid_data[i].TaxExciseAmount;
                        var strcess = Grid_data[i].TaxCESSAmount;
                        var strshcess = Grid_data[i].TaxSHCESSAmount;
                        var strprdtdiscount = Grid_data[i].ProductDiscountValue;
                        BasicAmount = parseFloat(BasicAmount) + (parseFloat(receivedqty) * parseFloat(grnrate));
                        if (parseFloat(orderedqty) != 0 && parseFloat(grnrate) != 0) {
                            if (receivedqty == "") {
                                receivedqty = 0;
                            }
                            Totalprdtdiscount = parseFloat(Totalprdtdiscount) + parseFloat(strprdtdiscount);

                            if (receivedqty != 0.000) {
                                Totalvatorcst = parseFloat(Totalvatorcst) + (parseFloat(strvatorcst));
                                Totalexcise = parseFloat(Totalexcise) + (parseFloat(strexcise));
                                Totalcess = parseFloat(Totalcess) + (parseFloat(strcess));
                                TotalShcess = parseFloat(TotalShcess) + (parseFloat(strshcess));
                            }

                        }
                    }
                    $scope.TX.BasicAmount = Math.round((parseFloat(BasicAmount) - parseFloat(Totalprdtdiscount)) * 100) / 100;
                    $scope.TX.totalvatorcst = Math.round(parseFloat(Totalvatorcst) * 100) / 100;
                    $scope.TX.totalcess = Math.round(parseFloat(Totalcess) * 100) / 100;
                    $scope.TX.totalexcise = Math.round(parseFloat(Totalexcise) * 100) / 100;
                    $scope.TX.totalshcess = Math.round(parseFloat(TotalShcess) * 100) / 100;
                    $scope.TX.totalproductdiscount = Math.round(parseFloat(Totalprdtdiscount) * 100) / 100;
                    $scope.TotalCalculations();
                    //             BASIC DETAILS             //
                    //$scope.$apply();
                }  // Basic Amount Calculations

                $scope.DiscountCalculations = function () {
                    debugger;

                    var BasicAmount = $scope.TX.BasicAmount || 0;
                    if (parseFloat(BasicAmount) > 0) {
                        //             Discount Details             //
                        var strDiscountType = $scope.TX.DiscountType;

                      

                        var strDiscountType = $scope.TX.DiscountType;
                       

                        var strDiscountFlatAmount = $scope.TX.DiscountFlatPercentage;
                        var DiscountAmount = 0;
                        //             Discount Details             //
                        //if (strDiscountType === "FLAT") {
                        //    //if (strDiscountFlatAmount !== undefined) {
                        //    //strDiscountPercentage = (parseFloat(strDiscountFlatAmount) / parseFloat(BasicAmount)) * 100;
                        //    //$scope.TX.DiscountPercentage = strDiscountPercentage;
                        //    //}
                        //} else if (strDiscountType === "PERCENTAGE") {
                        //    //strDiscountFlatAmount = (parseFloat(BasicAmount) * (parseFloat(strDiscountPercentage) / 100));
                        //    //$scope.TX.strDiscountFlatAmount = strDiscountFlatAmount;
                        //}
                        if (strDiscountType === "PERCENTAGE") {
                            DiscountAmount = (parseFloat(BasicAmount) * (parseFloat(strDiscountFlatAmount) / 100));
                        } else if (strDiscountType === "FLAT") {
                            DiscountAmount = strDiscountFlatAmount || 0;
                        }
                        if (parseFloat(strDiscountFlatAmount) > 0) {
                            $scope.TX.DiscountValue = Math.round(parseFloat(DiscountAmount) * 100) / 100;
                        }
                        //$scope.$apply();
                        $scope.TotalCalculations();
                    } else {
                        $scope.TX.DiscountValue = 0;
                    }
                } //Discount Amount Calculations

                $scope.DiscountFlatPercentageChange = function (e, myValue) {
                    debugger;
                    if (myValue === undefined) { myValue = 0; }
                    var strvalue = myValue;
                    var strDiscountType = $scope.TX.DiscountType;
                    var DiscountFlatPercentage = $scope.TX.DiscountFlatPercentage;
                    var BasicAmount = $scope.TX.BasicAmount || 0;
                    var DiscountAmount = 0;
                    if (parseFloat(BasicAmount) > 0) {
                        if (strDiscountType === "PERCENTAGE") {
                            if (parseFloat(myValue) > 100) {
                                alert('Percentage not more than 100 %!');
                                $scope.TX.DiscountFlatPercentage = '';
                                $scope.TX.DiscountValue = '';
                                $scope.TX.DiscountFlatPercentage.$invalid = true;
                            } else {
                                DiscountAmount = (parseFloat(BasicAmount) * (parseFloat($scope.TX.DiscountFlatPercentage) / 100));
                            }
                        } else if (strDiscountType === "FLAT") {
                            if (parseFloat(myValue) > parseFloat(BasicAmount)) {
                                //alert('');
                                alert('Flat Discount Value not more than Basic Amount !');
                                $scope.TX.DiscountFlatPercentage = '';
                                $scope.TX.DiscountValue = '';
                                $scope.TX.DiscountFlatPercentage.$invalid = true;
                            } else {
                                DiscountAmount = $scope.TX.DiscountFlatPercentage || 0;
                            }
                        }
                        if (parseFloat(DiscountAmount) > 0) {
                            //$scope.TX.DiscountValue = DiscountAmount;
                            $scope.TX.DiscountValue = Math.round(parseFloat(DiscountAmount) * 100) / 100;
                        }
                        else { $scope.TX.DiscountValue = 0; }
                        //$scope.ExiseCalculations();
                        //$scope.VatorCstCalculations();
                        $scope.TotalCalculations();
                    } else {
                        $scope.TX.DiscountValue = 0;
                    }
                };


                $scope.ProductdiscounttypeChange = function () {
                    debugger;

                    var strDiscountType = $scope.GD.ProductDiscountType;
                    if (strDiscountType === "FLAT" || strDiscountType === "PERCENTAGE") {
                        $scope.Producthddiscount = true;
                        $scope.GD.ProductDiscountFlatPercentage = '';
                        $scope.GD.ProductDiscountValue = '';
                    } else {
                        $scope.Producthddiscount = false;
                        $scope.GD.ProductDiscountFlatPercentage = 0;
                        $scope.GD.ProductDiscountValue = 0;
                    }
                    // $scope.ProductDiscountCalculations();
                    $scope.ProductExiseCalculations();
                    $scope.productVatorCstCalculations();
                    //$scope.ExiseCalculations();
                    // $scope.VatorCstCalculations();
                }
                //****************** TAX FORM  *******************************//

                $scope.Vendors = function () {
                    $scope.GR.grndate = new Date().getDate() + '/' + (parseInt(new Date().getMonth()) + 1) + '/' + new Date().getFullYear();
                    $http({
                        url: '/MMSMaster/GetVendorNamesData/',
                        method: "get"
                    }).success(function (data) {
                        debugger;
                        $scope.Vendornames = eval('(' + data.Data + ')');
                    });
                    $http({
                        url: '/MMSTransaction/Getstoragelocations/',
                        method: "get"
                    }).success(function (data) {
                        debugger;
                        $scope.storageareas = eval('(' + data.Storage + ')');
                        var data1 = eval('(' + data.Storage + ')');
                        var ROWS = "SELECT:SELECT;";
                        var Length123 = data1.length;
                        for (var i = 0; i < Length123; i++) {
                            ROWS = ROWS + data1[i].storagelocationid + ":" + data1[i].storagelocationname + ";";
                        }
                        var result = removeLastChar(ROWS + '"', ';"');
                        $scope.storagelocations = result;
                        var uomdata = eval('(' + data.Uom + ')');
                        $scope.uoms = uomdata;
                        UOMROWS = "SELECT:SELECT;";
                        var uomlen = uomdata.length;
                        for (var i = 0; i < uomlen; i++) {
                            UOMROWS = UOMROWS + uomdata[i].uomid + ":" + uomdata[i].uom + ";";
                        }
                        var result = removeLastChar(UOMROWS + '"', ';"');
                        $scope.grduoms = result;
                        $scope.shelfs = "SELECT:SELECT";
                        POGRID([]);
                    });
                    $http({
                        url: '/MMSTransaction/getRequestPersons/',
                        method: "get"
                    }).success(function (data) {
                        debugger;
                        $scope.Employees = eval('(' + data.Data + ')');
                    });
                };// Gettiing VendorNames , Storage Locations and Requested Employees....





                $scope.GrnChange = function () {
                    debugger;

                    var VID = $scope.GR.vendorid;
                    var strpotype = $scope.GR.grntype;
                    var strGRNid = $scope.GR.GRNNO;
               


                    $http.post('/MMSTransaction/getGRNdetails', { GRNid: strGRNid, Vendorid: VID }).success(function (data) {
                        debugger;
                        if (data != null) {
                            var grddata = eval('(' + data.Data + ')');
                            debugger;
                            var datalen = grddata.length;
                            if (strpotype == "MODIFY") {
                                $('#grdgrnpo').jqGrid('clearGridData');
                                POGRID(grddata);
                                BasicCalculations();
                                $scope.DiscountCalculations();
                                $scope.ExiseCalculations();
                                $scope.VatorCstCalculations();
                                debugger;
                                var strDiscountType = $scope.TX.DiscountType;
                                if (strDiscountType === "FLAT" || strDiscountType === "PERCENTAGE") {
                                    $scope.hddiscount = true;
                                    $scope.ischange = false;
                                } else {
                                    $scope.hddiscount = false;
                                    $scope.ischange = true;
                                }
                            }
                            if (strpotype == "REORDER") {
                                $('#grdgrndirect').jqGrid('clearGridData');
                                DirectMRNGRID(grddata);
                                BasicCalculations();
                                $scope.DiscountCalculations();
                                $scope.ExiseCalculations();
                                $scope.VatorCstCalculations();
                            }


                        }
                    });

                    $http.post('/MMSTransaction/getgrntaxdetails', { GRNid: strGRNid, Vendorid: VID, GrnType: strpotype }).success(function (data) {
                        if (data != null) {
                            debugger;
                            $scope.TX = eval('(' + data.Data + ')');

                            $scope.TX.DiscountType = eval('(' + data.Data + ')').DiscountType;
                            $scope.TX.DiscountValue = parseFloat(eval('(' + data.Data + ')').DiscountValue);
                            $scope.TX.BasicAmount = parseFloat(eval('(' + data.Data + ')').BasicAmount);
                            $scope.TX.TotalAmount = parseFloat(eval('(' + data.Data + ')').TotalAmount);

                            $scope.TX.DiscountFlatPercentage = parseFloat(eval('(' + data.Data + ')').DiscountFlatPercentage);
                            $scope.$apply();
                        }
                    });
                }
                $scope.ProductConversionValues = function () {
                    $http({
                        url: '/MMSTransaction/BinduomConversionValues/',
                        method: "get"
                    }).success(function (data) {
                        debugger;
                        $scope.ConversionUomValues = eval('(' + data.Data + ')');
                    });
                }// Gettiing All Product Conversion Values When  Page Load and After Saving

                var removeLastChar = function (value, char) {
                    var lastChar = value.slice(-2);
                    if (lastChar == char) {
                        value = value.slice(0, -2);
                    }
                    return value;
                }

                $scope.VendorChange = function () {
                    //  clearchange();
                    var ID = $scope.GR.vendorid;
                    var type = $scope.GR.grntype;
                    $scope.GR.invoiceno = "";
                    $scope.GR.receivedid = "";
                    $scope.GR.TermsandConditions = "";
                    $scope.Grnfrm.$setPristine();
                    $scope.GR.poid = '';
                    $scope.GR.GRNNO = '';
                    GridClear();
                    //ClearDirectGRN();
                    if (type != "SELECT GRN TYPE" && type != "" && type != null) {
                        if (ID != null && ID != "" && ID != undefined) {
                            if (type != "DIRECT") {
                                debugger;
                                $http.post("/MMSTransaction/getponumbers/", { ID: ID }).success(function (data) {
                                    debugger;
                                    if (data != null) {
                                        debugger;
                                        $scope.ponumbers = eval('(' + data.Data + ')');
                                        BasicCalculations();
                                    }
                                });

                            }
                            if (type == "MODIFY") {
                                $http.post("/MMSTransaction/getgrnnonumbers/", { ID: ID, TypeGrn: type }).success(function (data) {
                                    debugger;
                                    if (data != null) {
                                        debugger;
                                        $scope.GRNnumbers = eval('(' + data.Data + ')');
                                        //  BasicCalculations();
                                    }
                                });
                            }
                            if (type == "REORDER") {
                                $http.post("/MMSTransaction/getgrnnonumbers/", { ID: ID, TypeGrn: type }).success(function (data) {
                                    debugger;
                                    if (data != null) {
                                        debugger;
                                        $scope.GRNnumbers = eval('(' + data.Data + ')');
                                        //  BasicCalculations();
                                    }
                                });
                                $http.post("/MMSTransaction/GetVendorProducts/", { ID: ID }).success(function (data) {
                                    debugger;
                                    if (data != null) {
                                        debugger;
                                        $scope.products = eval('(' + data.Data + ')');
                                        BasicCalculations();
                                    }
                                });
                            }
                            else {
                                $http.post("/MMSTransaction/GetVendorProducts/", { ID: ID }).success(function (data) {
                                    debugger;
                                    if (data != null) {
                                        debugger;
                                        $scope.products = eval('(' + data.Data + ')');
                                        BasicCalculations();
                                    }
                                });
                            }
                        }
                    } else {
                        alert('Please Select GRN Type');
                        $scope.GR.vendorid = 0;
                        $('#grntype').focus();
                    }
                    //GridClear();
                };// Vendor Change Event For Fetching PO's When Type PO and Products When Type DIRECT

                $scope.DepartmentDetails = function () {
                    //$http({
                    //    url: '/MMSMaster/ShowCountry/',
                    //    method: "get"
                    //}).success(function (data) {
                    //    debugger;
                    //    if (data != null) {
                    //        $scope.Countries = data;
                    //    }
                    //});
                };

                $scope.grntypeChange = function () {
                    debugger;
                    var GRNtype = $scope.GR.grntype;
                  

                    $scope.GR.invoiceno = "";
                    $scope.GR.receivedid = "";
                    $scope.GR.TermsandConditions = "";
                    $scope.Grnfrm.$setPristine();
                    // ClearForm();
                    $scope.GRNnumbers = {};
                    GridClear();

                    //ClearDirectGRN();
                    // ExciseTaxClear();
                    //  VatTaxClear();
                    DiscountClear();
                    BasicCalculations();
                    if (GRNtype == "PO") {
                        $scope.poShow = true;
                        $scope.directShow = false;
                        //$http.post("/MMSTransaction/getponumbers/", { ID: "ALL" }).success(function (data) {
                        //    debugger;
                        //    if (data != null) {
                        //        debugger;
                        //        $scope.ponumbers = eval('(' + data.Data + ')');
                        //    }
                        //});
                    } else if (GRNtype == "DIRECT") {
                        ClearDirectGRN();
                        $scope.poShow = false;
                        $scope.directShow = true;
                        $scope.ischange = true;
                        DirectMRNGRID([]);
                    }
                    else if (GRNtype == "MODIFY") {
                        ClearDirectGRN();
                        $scope.poShow = false;
                        $scope.directShow = false;
                        $scope.ischange = false;
                        DirectMRNGRID([]);
                    }
                    else if (GRNtype == "REORDER") {
                        ClearDirectGRN();
                        $scope.poShow = false;
                        $scope.directShow = true;
                        $scope.ischange = true;
                        DirectMRNGRID([]);
                    }
                    //GridClear();
                    $scope.GR.vendorid = '';
                    $scope.GR.poid = '';
                };

                $scope.grnuomChange = function () {
                    debugger;
                    var strgrnuom = $("#UOM option:selected").text();
                    var struom = $scope.lblorderuom;
                    var strproductid = $scope.GD.productid;
                    var strorderuom = $scope.GD.orderuom;
                    var uomconversionvalues = $scope.ConversionUomValues;
                    var str = 0, strsel = 0; res = '<option role="option" value="">SELECT</option>';
                    if (strgrnuom === strorderuom) {
                        res += '<option role="option" value="1">1</option>';
                        $("#uomconversionvalue").find('option').remove().end().append(res);
                        //$("#uomconversionvalue").val(1);
                        //$scope.GD.uomconversionvalue = 1;
                        //$scope.hduomconversionvalue = true;
                        $("#uomconversionvalue").val('SELECT');
                    } else {
                        $scope.hduomconversionvalue = true;
                        if (uomconversionvalues.length > 0) {
                            for (var i = 0; i < uomconversionvalues.length; i++) {
                                if (uomconversionvalues[i].productid == parseInt(strproductid)) {
                                    if (uomconversionvalues[i].vchstandarduom == strorderuom && uomconversionvalues[i].vchconvertionuom == strgrnuom) {
                                        if (str == 0) {
                                            strsel = uomconversionvalues[i].numconvertionqty;
                                        }
                                        str++;
                                        res += '<option role="option" value="' + uomconversionvalues[i].numconvertionqty +
                                               '">' + uomconversionvalues[i].numconvertionqty + '</option>';
                                    }
                                }
                            }
                            $("#uomconversionvalue").find('option').remove().end().append(res);
                            //if (str == 1) {
                            //    $("#uomconversionvalue").val(strsel);
                            //} else {
                            $("#uomconversionvalue").val('SELECT');
                            //}
                        }
                    }
                };  //  Grn Uom Change When Grn Type DIRECT

                $scope.pochange = function () {
                    debugger;
                    var VID = $scope.GR.vendorid;
                    var type = $scope.GR.grntype;
                    var POID = $scope.GR.poid;
                    GridClear();
                    //GridClear();
                    if (type != "SELECT GRN TYPE" && type != "" && type != null && type != "DIRECT") {
                        if (VID != null && VID != "" && VID != undefined && VID != "SELECT VENDOR") {
                            if (POID != null && POID != "" && POID != undefined && POID != "SELECT PO") {
                                debugger;
                                $http.post("/MMSTransaction/getgrngriddetails/", { VID: VID, POID: POID }).success(function (data) {
                                    debugger;
                                    if (data != null) {
                                        debugger;
                                        var grdData = eval('(' + data.Data + ')');
                                        //var grdProductsorages = eval('(' + data.Data1 + ')');
                                        $("#grdgrnpo").jqGrid("clearGridData", true).trigger("reloadGrid");
                                        //for (var i = 0; i < grdData.length; i++) {
                                        //    for (var j = 0; j < grdProductsorages.length; j++) {
                                        //        if (grdData[i].productid == grdProductsorages[j].productid) {
                                        //            grdData[i].storagelocation = grdProductsorages[j].storagelocation;
                                        //            grdData[i].storagelocationid = grdProductsorages[j].storagelocationid;
                                        //            grdData[i].shelfname = grdProductsorages[j].shelfname;
                                        //            grdData[i].shelfid = grdProductsorages[j].shelfid;
                                        //        }
                                        //    }
                                        //}
                                        POGRID(grdData);
                                        //var res = '<option role="option" value="1">1</option>';
                                        //for (var j = 0; j < grdData.length; j++) {
                                        //    $("#" + selr + "_exuom").find('option').remove().end().append(res);
                                        //    $("#" + selr + "_exuom").val(1);
                                        //    //$("#uomconversionvalue").find('option').remove().end().append(res);
                                        //}
                                    }
                                });
                            }
                        } else {
                            $scope.GR.poid = 0;
                        }
                    } else {
                        $scope.GR.vendorid = 0;
                        $scope.GR.poid = 0;
                    }
                }  //   ---PO Change Event

                function GridClear() {
                    debugger;
                    var GRNtype = $scope.GR.grntype;
                    if (GRNtype == "PO") {
                        //var len1 = $('#grdgrnpo').jqGrid('getRowData').length;
                        $("#grdgrnpo").jqGrid("clearGridData", true).trigger("reloadGrid");
                    } else {
                        $("#grdgrndirect").jqGrid("clearGridData", true).trigger("reloadGrid");
                    }
                }  //----Grid Clear Code

                $scope.SaveGrn = function (GR) {
                    debugger;
                    $scope.submitted = true;
                    var IsValid = true;
                    var strvendor = $("#vendorid option:selected").text();
                    var strrequestedby = $("#receivedby option:selected").text();
                    if (strvendor != null && strvendor != "" && strvendor != undefined && strvendor != "SELECT VENDOR") {
                        $scope.GR.vendorname = strvendor;
                    } else {
                        IsValid = false;
                        return false;
                    }
                    if (strrequestedby != null && strrequestedby != "" && strrequestedby != undefined && strrequestedby != "SELECT USER") {
                        $scope.GR.receivedby = strrequestedby;
                    } else {
                        IsValid = false;
                        return false;
                    }
                    var strinvoiceno = $("#invoiceno").val();
                    var strinvoicedate = $("#invoicedate").val();
                    if (strinvoiceno != null && strinvoiceno != "" && strinvoiceno != undefined) {
                    } else {
                        $scope.GR.invoiceno = null;
                    }
                    if (strinvoicedate != null && strinvoicedate != "" && strinvoicedate != undefined) {
                    } else {
                        $scope.GR.strinvoicedate = null;
                    }
                    var GRNTYPE = $scope.GR.grntype;
                    var Grid_data;
                    if (GRNTYPE === "DIRECT") {
                        if ($scope.isFormValid) {
                            Grid_data = $('#grdgrndirect').jqGrid('getRowData');
                            if (!Grid_data.length > 0) {
                                alert('Please Add Details to Grid');
                                IsValid = false;
                            }
                        }
                    } else {
                        var strpono = $("#poid option:selected").text();
                        if (strpono != null && strpono != "" && strpono != undefined) {
                            $scope.GR.pono = strpono;
                        }
                        Grid_data = $('#grdgrnpo').jqGrid('getRowData');
                    }
                    if (IsValid) {
                        if ($scope.isFormValid && $scope.isTaxFormValid) {
                            if (GRNTYPE === "PO") {
                                if (parseInt(Grid_data.length) > 0) {
                                    if (!GridChceck()) {
                                        return false;
                                    }
                                }
                            }
                            if (GRNTYPE === "DIRECT") {
                                Grid_data = $('#grdgrndirect').jqGrid('getRowData');
                                if (!Grid_data.length > 0) {
                                    alert('Please Add Details to Grid');
                                    return false;
                                }
                            }
                            if (GRNTYPE === "MODIFY") {
                                Grid_data = $('#grdgrnpo').jqGrid('getRowData');
                                if (!Grid_data.length > 0) {
                                    alert('Please Add Details to Grid');
                                    return false;
                                }
                            }
                            if (GRNTYPE === "REORDER") {
                                Grid_data = $('#grdgrndirect').jqGrid('getRowData');
                                if (!Grid_data.length > 0) {
                                    alert('Please Add Details to Grid');
                                    return false;
                                }
                            }
                            if ($scope.btnSave == 'Save') {
                                debugger;
                                $scope.DiscountCalculations();
                                // $scope.ExiseCalculations();
                                // $scope.VatorCstCalculations();
                                var result = confirm('Are You Sure? Do You Want To Save?');
                                if (result) {
                                    var rowID = 0;
                                    if (GRNTYPE === "PO") {
                                        for (var i = 0; i < Grid_data.length; i++) {
                                            rowID = i + 1;
                                            var conval = $("#" + rowID + "_exuom").val();
                                            Grid_data[i].uomconversionvalue = conval;
                                        }
                                    }
                                    $scope.Griddata = Grid_data;
                                    $http({ method: 'POST', data: { GoodsReceivedNoteDTO: JSON.stringify(GR), lstGoodsReceivedNoteDTO: JSON.stringify($scope.Griddata), TAX: JSON.stringify($scope.TX) }, url: '/MMSTransaction/SaveGRN/' }).success(function (data) {
                                        debugger;
                                        if (data === true) {
                                            debugger;
                                            alert('Goods Received Note Details Saved Sucessfully');
                                            ClearForm();
                                            ProductConversionValues();
                                        }
                                        else {
                                            alert("Error While Saving Data!");
                                        }
                                    });
                                }
                            }
                        }
                    }
                }; //Save Method

                $scope.Reset = function () {
                    ClearForm();
                }


                //-----------------------------------------new-------------------------------//



                $scope.ProductAmountcalculate = function () {
                    debugger;
                    var rate = $scope.GD.grnrate;
                    var qty = $scope.GD.receivedqty;
                    var strdiscounttype = $scope.GD.ProductDiscountType;
                    var strprdtdiscount = 0;
                    if ($scope.GD.ProductDiscountFlatPercentage != "") {

                        if (strdiscounttype == "FLAT" || strdiscounttype == "PERCENTAGE") {
                            $scope.ProductDiscountCalculations();
                            strprdtdiscount = $scope.GD.ProductDiscountValue;

                        }

                        else {
                            $scope.GD.ProductDiscountValue = 0;
                            strprdtdiscount = 0;
                            // var prdtamount = parseFloat(rate) * parseFloat(qty);
                        }
                    }
                    else {
                        $scope.GD.ProductDiscountValue = 0;
                    }

                    var prdtamount = parseFloat((parseFloat(rate) * parseFloat(qty)) - parseFloat(strprdtdiscount)).toFixed(2);
                    $scope.GD.productamount = prdtamount;
                }

                $scope.ProductExiseCalculations = function () {
                    debugger;
                    var rate = $scope.GD.grnrate;
                    var qty = $scope.GD.receivedqty;
                    var BasicAmount = 0;
                    if (strdiscounttype == "FLAT" || strdiscounttype == "PERCENTAGE") {
                        DiscountAmount = $scope.GD.ProductDiscountValue;
                        BasicAmount = (parseFloat(rate) * parseFloat(qty)) - parseFloat(DiscountAmount);
                    }
                    else {
                        BasicAmount = $scope.GD.productamount || 0;
                    }

                    if (parseFloat(BasicAmount) > 0) {
                        //             Excise TAX  Details             //
                        var strTaxType = $scope.GD.taxtype;
                        var strdiscounttype = $scope.GD.ProductDiscountType;

                        var DiscountAmount = 0;
                        if (strdiscounttype == "FLAT" || strdiscounttype == "PERCENTAGE") {
                            DiscountAmount = $scope.GD.ProductDiscountValue;
                        }


                        var strTaxExcisePercentage = $scope.GD.TaxExcisePercentage || 0;
                        var strTaxExciseAmount = $scope.GD.TaxExciseAmount || 0;
                        var strTaxCESSPercentage = $scope.GD.TaxCESSPercentage;
                        var strTaxCESSAmount = $scope.GD.TaxCESSAmount || 0;
                        var strTaxSHCESSPercentage = $scope.GD.TaxSHCESSPercentage;
                        var strTaxSHCESSAmount = $scope.GD.TaxSHCESSAmount || 0;
                        //             Excise TAX  Details             //

                        if (strTaxType === "EXCISE" || strTaxType === "BOTH") {
                            if (strTaxExcisePercentage !== undefined && strTaxExcisePercentage != "Select") {
                                strTaxExciseAmount = (parseFloat(BasicAmount)) * (parseFloat(strTaxExcisePercentage) / 100);
                                $scope.GD.TaxExciseAmount = Math.round(parseFloat(strTaxExciseAmount) * 100) / 100;
                            }
                            if (strTaxExcisePercentage != "Select") {
                                if (strTaxCESSPercentage !== undefined) {
                                    strTaxCESSAmount = parseFloat(strTaxExciseAmount) * (parseFloat(strTaxCESSPercentage) / 100);
                                    $scope.GD.TaxCESSAmount = Math.round(parseFloat(strTaxCESSAmount) * 100) / 100;
                                }
                                if (strTaxCESSPercentage !== undefined) {
                                    strTaxSHCESSAmount = parseFloat(strTaxExciseAmount) * (parseFloat(strTaxSHCESSPercentage) / 100);
                                    $scope.GD.TaxSHCESSAmount = Math.round(parseFloat(strTaxSHCESSAmount) * 100) / 100;
                                }
                            } else {
                                //$scope.GD.TaxExciseAmount = '';
                                //$scope.GD.TaxCESSPercentage = '';
                                //$scope.GD.TaxSHCESSPercentage = '';
                                $scope.GD.TaxExcisePercentage.$valid = true;
                                $scope.GD.TaxCESSPercentage.$valid = true;
                                $scope.GD.TaxSHCESSPercentage.$valid = true;
                            }
                        } else {
                            $scope.GD.TaxExcisePercentage = 0;
                            $scope.GD.TaxExciseAmount = 0;
                            $scope.GD.TaxCESSPercentage = 0;
                            $scope.GD.TaxCESSAmount = 0;
                            $scope.GD.TaxSHCESSPercentage = 0;
                            $scope.GD.TaxSHCESSAmount = 0;
                        }
                        //$scope.$apply();

                    } else {
                        $scope.GD.TaxExciseAmount = 0;
                        $scope.GD.TaxCESSAmount = 0;
                        $scope.GD.TaxSHCESSAmount = 0;
                    }
                }

                $scope.ProductDiscountFlatPercentageChange = function (e, myValue) {
                    debugger;
                    var strvalue = myValue;
                    var strDiscountType = $scope.GD.ProductDiscountType;
                    var DiscountFlatPercentage = $scope.GD.ProductDiscountFlatPercentage;
                    var rate = $scope.GD.grnrate;
                    var qty = $scope.GD.receivedqty;
                    var BasicAmount = (parseFloat(rate) * parseFloat(qty)) || 0;
                    var DiscountAmount = 0;
                    if (parseFloat(BasicAmount) > 0) {
                        if (strDiscountType === "PERCENTAGE") {
                            if (parseFloat(myValue) > 100) {
                                alert('Discount Percentage Should not be more than 100%!');
                                $scope.GD.ProductDiscountFlatPercentage = '';
                                $scope.GD.ProductDiscountValue = '';
                                $scope.GD.ProductDiscountFlatPercentage.$invalid = true;
                            } else {
                                DiscountAmount = (parseFloat(BasicAmount) * (parseFloat($scope.GD.ProductDiscountFlatPercentage) / 100));
                            }
                        } else if (strDiscountType === "FLAT") {
                            if (parseFloat(myValue) > parseFloat(BasicAmount)) {
                                //alert('');
                                alert('Flat Discount Value not more than Basic Amount !');
                                $scope.GD.ProductDiscountFlatPercentage = '';
                                $scope.GD.ProductDiscountValue = '';
                                $scope.GD.ProductDiscountFlatPercentage.$invalid = true;
                            } else {
                                DiscountAmount = $scope.GD.ProductDiscountFlatPercentage || 0;
                            }
                        }
                        if (parseFloat(DiscountAmount) > 0) {
                            // $scope.TX.DiscountValue = DiscountAmount;
                            $scope.GD.ProductDiscountValue = Math.round(parseFloat(DiscountAmount) * 100) / 100;
                        }


                        //$scope.ProductAmountcalculate();
                        $scope.ProductExiseCalculations();
                        $scope.productVatorCstCalculations();
                        $scope.ProductTotalCalculations();
                    } else {
                        $scope.Product.ProductDiscountValue = 0;
                    }
                };

                $scope.productVatorCstCalculations = function () {
                    debugger;
                    var rate = $scope.GD.grnrate;
                    var qty = $scope.GD.receivedqty;
                    var prdtamount = $scope.GD.productamount;
                    var prdttaxtype = $scope.GD.vatorcst;
                    var prdttaxpercentage = $scope.GD.taxvatcst;
                    var strdiscounttype = $scope.GD.ProductDiscountType;
                    var strprdtdiscount = 0;

                    if (strdiscounttype == "FLAT" || strdiscounttype == "PERCENTAGE") {
                        strprdtdiscount = $scope.GD.ProductDiscountValue;
                        prdtamount = (parseFloat(rate) * parseFloat(qty)) - parseFloat(strprdtdiscount);
                    }
                    else {
                        prdtamount = $scope.GD.productamount || 0;
                    }
                    if (prdtamount > 0) {
                        if (prdttaxtype == 'VAT' || prdttaxtype == 'CST') {
                            $scope.GD.TaxvatorcstAmount = Math.round(parseFloat(prdttaxpercentage) * (parseFloat(prdtamount))) / 100;
                        }
                        else {
                            $scope.GD.TaxvatorcstAmount = 0;
                        }
                    }
                    else {
                        $scope.GD.TaxvatorcstAmount = 0;
                    }


                }


                $scope.ProductDiscountCalculations = function () {
                    debugger;
                    var rate = $scope.GD.grnrate;
                    var qty = $scope.GD.receivedqty;
                    var BasicAmount = (parseFloat(rate) * parseFloat(qty)) || 0;

                    if (parseFloat(BasicAmount) > 0) {
                        //             Discount Details             //
                        var strDiscountType = $scope.GD.ProductDiscountType;
                        var strDiscountFlatAmount = $scope.GD.ProductDiscountFlatPercentage;
                        var DiscountAmount = 0;
                        if (strDiscountType === "PERCENTAGE" || strDiscountType === "FLAT") {
                            if (strDiscountFlatAmount == 0 || strDiscountFlatAmount == '') {
                                $scope.GD.ProductDiscountValue = 0;
                                $scope.submittedAdd = false;
                            }
                            //else {
                            //    $scope.submittedAdd = true;
                            //}
                        }
                        //             Discount Details             //
                        if (strDiscountType === "PERCENTAGE") {
                            DiscountAmount = (parseFloat(BasicAmount) * (parseFloat(strDiscountFlatAmount) / 100));
                        } else if (strDiscountType === "FLAT") {
                            DiscountAmount = strDiscountFlatAmount || 0;
                        }
                        if (parseFloat(strDiscountFlatAmount) > 0) {
                            $scope.GD.ProductDiscountValue = Math.round(parseFloat(DiscountAmount) * 100) / 100;
                        }
                        //$scope.$apply();
                        //$scope.ProductAmountcalculate();
                        $scope.ProductDiscountFlatPercentageChange();
                        $scope.ProductExiseCalculations();
                        $scope.productVatorCstCalculations();
                        $scope.ProductTotalCalculations();
                    } else {
                        $scope.GD.ProductDiscountValue = 0;
                    }
                }

                $scope.ProductTotalCalculations = function () {
                    debugger;
                    var rate = $scope.GD.grnrate;
                    var qty = $scope.GD.receivedqty;
                    var strBasicAmount = (parseFloat(rate) * parseFloat(qty));
                    if (parseFloat(strBasicAmount) > 0) {
                        var strTaxExciseAmount = $scope.GD.TaxExciseAmount || 0;
                        var strTaxCESSAmount = $scope.GD.TaxCESSAmount || 0;
                        var strTaxSHCESSAmount = $scope.GD.TaxSHCESSAmount || 0;
                        var strTaxvatorcstAmount = $scope.GD.TaxvatorcstAmount || 0;
                        var strDiscountFlatAmount = $scope.GD.ProductDiscountValue || 0;
                        var strtaxtype = $scope.GD.taxtype;

                        var strprdtdiscount = $scope.GD.ProductDiscountValue;
                        debugger;
                        var strdiscounttype = $scope.GD.ProductDiscountType;
                        if (strdiscounttype == "FLAT" || strdiscounttype == "PERCENTAGE") {
                            strBasicAmount = (parseFloat(rate) * parseFloat(qty)) - parseFloat(strDiscountFlatAmount);
                        }

                        //if (strtaxtype !== "NONE" || strtaxtype !=undefined) {
                        //    TotalAmount = parseFloat(strBasicAmount) ;
                        //    if (strtaxtype === "EXCISE" || strtaxtype === "BOTH") {
                        //        TotalAmount = strBasicAmount + parseFloat(strTaxExciseAmount) + parseFloat(strTaxCESSAmount) + parseFloat(strTaxSHCESSAmount);
                        //    }
                        //    if (strtaxtype === "VAT" || strtaxtype === "BOTH") {
                        //        TotalAmount = strBasicAmount + parseFloat(strTaxvatorcstAmount);
                        //    }

                        //} else {
                        //    TotalAmount = parseFloat(strBasicAmount) ;
                        //}
                        //$scope.$apply();

                        $scope.GD.productamount = Math.round(parseFloat(strBasicAmount) * 100) / 100;
                    } else {
                        $scope.GD.productamount = 0;
                    }
                }

                //****************** Clear Details *******************************//

                function ClearForm() {
                    debugger;
                    var Date = $scope.GR.grndate;
                    $scope.GR = {};
                    $scope.ponumbers = {};
                    $scope.hdEXCISE = false;
                    $scope.hdVATCST = false;
                    $scope.poShow = false;
                    $scope.directShow = false;
                    $scope.Grnfrm.$setPristine();
                    $scope.submitted = false;
                    $scope.TX = {};
                    $scope.ProductStoragesShelfs = {};
                    $scope.frmtx.$setPristine();
                    $scope.btnSave = "Save";
                    $("#grdgrnpo").jqGrid("clearGridData", true).trigger("reloadGrid");
                    $scope.GR.grndate = Date;
                }  // Reset/Clear Method When Type PO

                $scope.ResetDirectGRN = function () {
                    $('#productid')[0].options.length = 0;
                    ClearDirectGRN();
                };  // Reset/Clear Method When Type DIRECT

                function ClearDirectGRN() {
                    debugger;


                    $scope.GD = {};
                    $scope.shelfnames = {};
                    $scope.lblCategory = '';
                    $scope.lblSubCategoryname = '';
                    $scope.lblproductcode = '';
                    $scope.lblorderuom = '';
                    $('#lblCategory').val('');
                    $('#lblSubCategoryname').val('');
                    $('#lblproductcode').val('');
                    $('#lblorderuom').val('');
                    if ($scope.GR.grntype == "PO") {
                        $scope.poShow = true;
                        $scope.directShow = false;
                    } else if ($scope.GR.grntype == "DIRECT") {
                        $scope.poShow = false;
                        $scope.directShow = true;
                    }
                    else if ($scope.GR.grntype == "MODIFY") {
                        $scope.poShow = false;
                        $scope.directShow = true;
                    }
                    else if ($scope.GR.grntype == "REORDER") {
                        $scope.poShow = false;
                        $scope.directShow = true;
                    } else {
                        ClearForm();
                    }
                    $scope.ProductStoragesShelfs = {};
                    $scope.GrnDirectfrm.$setPristine();
                    $scope.submittedAdd = false;
                    $("#grdgrnpo").jqGrid("clearGridData", true).trigger("reloadGrid");
                    $("#uomconversionvalue").find('option').remove().end().append('<option role="option" value="SELECT">SELECT</option>');
                    //$("#grdgrndirect").jqGrid("clearGridData", false).trigger("reloadGrid");
                }   // Reset/Clear Method When Type DIRECT

                //****************** Clear Details *******************************//

                $scope.productChange = function () {
                    debugger;
                    var PrId = $scope.GD.productid;
                    var VendorId = $scope.GR.vendorid;
                    ClearDirectGRN();
                    $scope.taxtypeChange();
                    $scope.storageareas = {};
                    $scope.GD.productid = PrId;
                    $http.post('/MMSMaster/GetProductUomBy', { Prdid: PrId, vendorid: VendorId }).success(function (data) {
                        debugger;
                        var L = eval('(' + data.productdetails + ')');;
                        var strUom = L[0]["uomname"];
                        var strCode = L[0]["productcode"];
                        var strcategory = L[0]["categoryname"];
                        var strsubcategory = L[0]["subcategoryname"];
                        var strStorageLoc = L[0]["storagelocation"];
                        var strStorageLocid = L[0]["storagelocationid"];
                        var strShelfLoc = L[0]["shelfname"];
                        var strShelfLocid = L[0]["shelfid"];
                        var strEstimaterate = L[0]["estimaterate"];
                        $scope.GD.grnrate = parseFloat(strEstimaterate);
                        //Category
                        if (strcategory != null && strcategory != "") {
                            var strcat = strcategory.split("+");
                            //Category
                            $scope.GD.productcategoryid = strcat[1];
                            $scope.GD.categoryname = strcat[0];
                            $scope.lblCategory = strcat[0];
                        }
                        //Sub Category
                        if (strsubcategory != null && strsubcategory != "") {
                            var strsubcat = strsubcategory.split("+");
                            //Sub Category
                            $scope.GD.productsubcategoryid = strsubcat[1];
                            $scope.GD.subcategoryname = strsubcat[0];
                            $scope.lblSubCategoryname = strsubcat[0];
                        }
                        var strproductname = $("#productid option:selected").text();

                        //Product Code
                        $scope.GD.productcode = strCode;
                        $scope.GD.productname = strproductname;
                        $scope.lblproductcode = strCode;

                        //UOM
                        $scope.GD.orderuom = strUom;
                        $scope.lblorderuom = strUom;
                        $scope.GD.productid = PrId;
                        $scope.GD.grnuom = strUom;
                        $scope.GD.uomconversionvalue = 1;

                        //PRODUCT STORAGES
                        var ROWSTORES = [];
                        var rowStores = { storagelocationid: strStorageLocid, storagelocationname: strStorageLoc };
                        ROWSTORES.push(rowStores);
                        $scope.storageareas = ROWSTORES;
                        var ROWSHELFS = [];
                        var rowshelfs = { shelfname: strShelfLoc, shelfid: strShelfLocid };
                        ROWSHELFS.push(rowshelfs);
                        $scope.shelfnames = ROWSHELFS;
                        $scope.GD.storagelocationid = strStorageLocid;
                        $scope.GD.storagelocation = strStorageLoc;
                        $scope.GD.shelfid = strShelfLocid;
                        $scope.GD.shelfname = strShelfLoc;
                        ////PRODUCT STORAGES
                        //var data1 = eval('(' + data.ProductStorages + ')');
                        //var ROWS = [];
                        //var Length123 = data1.length;
                        //for (var i = 0; i < Length123; i++) {
                        //    //c.storagelocationid as c.storagelocationname for c in storageareas
                        //    var row = { storagelocationid: data1[i].storagelocationid, storagelocationname: data1[i].storagelocationname };
                        //    ROWS.push(row);
                        //}
                        //$scope.GD.storagelocationid = ROWS[0].storagelocationid;
                        ////$scope.storageareas = GetUniqueStorages(ROWS);
                        //$scope.ProductStoragesShelfs = eval('(' + data.ProductStorages + ')');
                        //storagelocationid, storagelocationname
                        $scope.$apply();
                    });
                    $scope.$apply();
                };//   Product Change Event When Grn type Direct

                function GetUniqueStorages(inputArray) {
                    //NEED TO WRITE TOMORROW
                    debugger;
                    var uniqueNames = [];
                    var l = inputArray.length, i, j;
                    for (i = 0; i < l; i++) {
                        for (j = 0; j < uniqueNames.length; j++) {
                            if (inputArray[i].storagelocationid != uniqueNames[j].storagelocationid) {
                                var row = { storagelocationid: inputArray[i].storagelocationid, storagelocationname: inputArray[i].storagelocationname };
                                uniqueNames.push(row);
                            }
                        }
                        if (i == 0) {
                            var row = { storagelocationid: inputArray[i].storagelocationid, storagelocationname: inputArray[i].storagelocationname };
                            uniqueNames.push(row);
                        }
                    }
                    return uniqueNames;
                } //For Unique Storages

                function GetUniqueShelfs(inputArray) {
                    //NEED TO WRITE TOMORROW
                    debugger;
                    var uniqueNames = [];
                    var l = inputArray.length, i, j;
                    for (i = 0; i < l; i++) {
                        for (j = 0; j < uniqueNames.length; j++) {
                            if (inputArray[i].shelfname != uniqueNames[j].shelfname) {
                                var row = { shelfname: inputArray[i].shelfname, shelfid: inputArray[i].shelfid };
                                uniqueNames.push(row);
                            }
                        }
                        if (i == 0) {
                            if (inputArray[i].shelfname != '' && inputArray[i].shelfname != null && inputArray[i].shelfname != undefined) {
                                var row = { shelfname: inputArray[i].shelfname, shelfid: inputArray[i].shelfid };
                            }
                            uniqueNames.push(row);
                        }
                    }
                    return uniqueNames;
                }  //For Unique Shelfs

                $scope.storageareaChange = function () {
                    debugger;
                    $scope.shelfnames = {};
                    var ID = $scope.GD.storagelocationid;
                    debugger;
                    $scope.GD.storagelocation = $("#storagelocationid option:selected").text();
                    if (ID != null && ID != "" && ID != undefined && ID != "undefined") {
                        //$http.post("/MMSTransaction/getshelfs/", { ID: ID }).success(function (data) {
                        //    debugger;
                        //    if (data != null) {
                        //        debugger;
                        //        var data1 = eval('(' + data.Data + ')');
                        //        $scope.shelfnames = data1;
                        //    }
                        //});
                        //var data = $scope.ProductStoragesShelfs;
                        //var datalen = data.length;
                        //var ROWS = [];
                        //for (var i = 0; i < datalen; i++) {
                        //    if (data[i].storagelocationid == ID) {
                        //        if (data[i].shelfname != '' && data[i].shelfname != null && data[i].shelfname != undefined) {
                        //            var row = { shelfname: data[i].shelfname, shelfid: data[i].shelfid };
                        //            ROWS.push(row);
                        //        }
                        //    }
                        //}
                        //$scope.shelfnames = ROWS;
                    }
                } //Storage Location/Area Change Event when grn type direct

                function storagelocationChange() {
                    debugger;
                    var selr = jQuery('#grdgrnpo').jqGrid('getGridParam', 'selrow');
                    var storagelocationid = selr + "_storagelocation";
                    var ID = $("#" + storagelocationid + "").val();
                    jQuery("#grdgrnpo").jqGrid('setCell', selr, 'storagelocationid', ID);
                    if (ID != null && ID != "" && ID != undefined && ID != "undefined") {
                        $scope.shelfs = {};
                        $http.post("/MMSTransaction/getshelfs/", { ID: ID }).success(function (data) {
                            debugger;
                            if (data != null) {
                                debugger;
                                var data1 = eval('(' + data.Data + ')');
                                var ROWS = "SELECT:SELECT;";
                                var Length123 = data1.length;
                                for (var i = 0; i < Length123; i++) {
                                    ROWS = ROWS + data1[i].shelfid + ":" + data1[i].shelfname + ";";
                                }
                                var result = removeLastChar(ROWS + '"', ';"');
                                $scope.shelfs = result;
                                jQuery("#grdgrnpo").setColProp('shelfname', { editoptions: { value: result } });
                                editRow(selr);
                                //$scope.$apply(function () {
                                //    $scope.shelfs = result;
                                //});
                                //$('#grdgrnpo').trigger('reloadGrid');
                                //$scope.$apply();
                            }
                        });
                    }
                }//Grid Storage Location/Area Change Event when grn type PO

                function poGriduomchange() {
                    debugger;
                    var selr = jQuery('#grdgrnpo').jqGrid('getGridParam', 'selrow');
                    var uomid = selr + "_grnuom";
                    var grdpodata = $('#grdgrnpo').jqGrid('getRowData', selr);
                    var uomName = $("#" + uomid + " option:selected ").text();
                    //var rowid = parseFloat(selr) - 1;
                    var str = 0, strvalue = 0, res = '<option role="option" value="">SELECT</option>';
                    if (grdpodata.orderuom === uomName) {
                        res += '<option role="option" value="1">1</option>';
                        //jQuery("#grdgrnpo").jqGrid('setCell', selr, 'uomconversionvalue', 1);
                        $("#" + selr + "_exuom").find('option').remove().end().append(res);
                        $("#" + selr + "_exuom").val(1);
                    } else {
                        var uomconversionvalues = $scope.ConversionUomValues;
                        if (uomconversionvalues.length > 0) {
                            for (var i = 0; i < uomconversionvalues.length; i++) {
                                if (uomconversionvalues[i].productid == parseInt(grdpodata.productid)) {
                                    if (uomconversionvalues[i].vchstandarduom == grdpodata.orderuom && uomconversionvalues[i].vchconvertionuom == uomName) {
                                        str++;
                                        strvalue = uomconversionvalues[i].numconvertionqty;
                                        res += '<option role="option" value="' + uomconversionvalues[i].numconvertionqty +
                                               '">' + uomconversionvalues[i].numconvertionqty + '</option>';
                                    } else {
                                        $("#" + selr + "_exuom").find('option').remove().end().append(res);
                                        //jQuery("#grdgrnpo").jqGrid('setCell', selr, 'uomconversionvalue', 0);
                                    }
                                } else {
                                    $("#" + selr + "_exuom").find('option').remove().end().append(res);
                                    //jQuery("#grdgrnpo").jqGrid('setCell', selr, 'uomconversionvalue', 0);
                                }
                            }
                            if (str >= 1) {
                                $("#" + selr + "_exuom").find('option').remove().end().append(res);
                            }
                        } else {
                            $("#" + selr + "_exuom").find('option').remove().end().append(res);
                            //jQuery("#grdgrnpo").jqGrid('setCell', selr, 'uomconversionvalue', 0);
                        }
                        $("#" + selr + "_exuom").val($("#" + selr + "_exuom option:first").val());
                    }
                } //PO Grid UOM Change Event  and Fetching Existing Uom Conversion Values if Exists

                function ShelfChange() {
                    debugger;
                    var selr = jQuery('#grdgrnpo').jqGrid('getGridParam', 'selrow');
                    var storagelocationid = selr + "_shelfname";
                    var ID = $("#" + storagelocationid + "").val();
                    jQuery("#grdgrnpo").jqGrid('setCell', selr, 'shelfid', ID);
                    //alert(ID + "____" + storagelocationid + "---------");
                }//Grid Shelf Location/Area Change Event when grn type PO

                function reloadGrid() {
                    //
                    //$("#grdgrnpo").jqGrid("clearGridData", true).trigger("reloadGrid");
                    //POGRID(Grid_data);
                    var selr = jQuery('#grdgrnpo').jqGrid('getGridParam', 'selrow');
                    var Grid_data = $('#grdgrnpo').jqGrid('getRowData', selr);
                    $('#grdgrnpo').jqGrid('delRowData', selr);
                    $('#grdgrnpo').jqGrid("addRowData", 1, Grid_data, "last");
                    //var selr = jQuery('#grdgrnpo').jqGrid('getGridParam', 'selrow');
                    $("#grdgrnpo").trigger("reloadGrid");
                    //$("#grdgrnpo").on("onchange", "tr", function (e) {
                    //    debugger;
                    //    if (e.name === 'shelfname') {
                    //        alert('sdfsdfds');
                    //    }
                    //});
                }  //Reload Grid Values

                function GridChceck() {
                    var IsValid = true;
                    var grid = $("#grdgrnpo");
                    var Grid_data = $('#grdgrnpo').jqGrid('getRowData');
                    var len = Grid_data.length;
                    var indexOfColumn = 0, rowid;
                    var strConversionValue = '';
                    //var grnrate = "";
                    //var returnqty = "";
                    //var orderedqty = "";
                    //var storagelocation = "";
                    for (var i = 0; i < len; i++) {
                        //receivedqty = Grid_data[i].receivedqty;
                        //grnrate = Grid_data[i].grnrate;
                        //returnqty = Grid_data[i].returnqty;
                        //orderedqty = Grid_data[i].orderedqty;
                        //storagelocation = Grid_data[i].storagelocation;
                        //rowid = i + 1;
                        if (parseFloat(Grid_data[i].receivedqty) > 0) {
                            indexOfColumn = indexOfColumn + 1;
                            strConversionValue = $("#" + (i + 1) + "_exuom").val();
                            if (Grid_data[i].receivedqty == "0.000" || parseFloat(Grid_data[i].receivedqty) === 0) {
                                IsValid = false;
                                $('#grdgrnpo').jqGrid("setCell", i + 1, "receivedqty", "", "ui-state-error ui-state-error-text");
                            }
                            //else {
                            //    indexOfColumn = getColumnIndexByName("receivedqty");
                            //    grid[0].rows.namedItem(rowid).cells[indexOfColumn].removeClass("ui-state-error ui-state-error-text");
                            //}
                            if (Grid_data[i].grnrate == "" || Grid_data[i].grnrate == "0.00") {
                                IsValid = false;
                                $('#grdgrnpo').jqGrid("setCell", i + 1, "grnrate", "", "ui-state-error ui-state-error-text");
                            }
                            //else {
                            //    indexOfColumn = getColumnIndexByName("grnrate");
                            //    grid[0].rows.namedItemrowid.cells[indexOfColumn].removeClass("ui-state-error ui-state-error-text");
                            //}
                            if (Grid_data[i].returnqty == "") {
                                IsValid = false;
                            }
                            if (Grid_data[i].orderedqty == "") {
                                IsValid = false;
                            }
                            if (Grid_data[i].storagelocation == "" || Grid_data[i].storagelocation == "SELECT") {
                                IsValid = false;
                                $('#grdgrnpo').jqGrid("setCell", i + 1, "storagelocation", "", "ui-state-error ui-state-error-text");
                            }
                            //else {
                            //    indexOfColumn = getColumnIndexByName("storagelocation");
                            //    grid[0].rows.namedItem(rowid).cells[indexOfColumn].removeClass("ui-state-error ui-state-error-text");
                            //}
                            if (Grid_data[i].storagelocationid == "") {
                                IsValid = false;
                            }
                            if (Grid_data[i].grnuom == "" || Grid_data[i].grnuom == "SELECT") {
                                IsValid = false;
                                $('#grdgrnpo').jqGrid("setCell", i + 1, "grnuom", "", "ui-state-error ui-state-error-text");
                            }
                            //else {
                            //    indexOfColumn = getColumnIndexByName("grnuom");
                            //    grid[0].rows.namedItem(rowid).cells[indexOfColumn].removeClass("ui-state-error ui-state-error-text");
                            //}
                            if (Grid_data[i].uomconversionvalue == "") {
                                IsValid = false;
                            }
                            //orderuom, grnuom, uomconversionvalue
                            if (Grid_data[i].orderuom != "" && Grid_data[i].grnuom != "") {
                                if (parseFloat(Grid_data[i].orderuom) != parseFloat(Grid_data[i].grnuom)) {
                                    if (Grid_data[i].uomconversionvalue == "" || Grid_data[i].uomconversionvalue == "0.0000" || parseFloat(Grid_data[i].uomconversionvalue) == 0 || strConversionValue == 'SELECT' || strConversionValue == '') {
                                        alert('Please Select Conversion Value in Grid!');
                                        IsValid = false;
                                        $('#grdgrnpo').jqGrid("setCell", i + 1, "uomconversionvalue", "", "ui-state-error ui-state-error-text");
                                    }
                                    //else {
                                    //    indexOfColumn = getColumnIndexByName("uomconversionvalue");
                                    //    grid[0].rows.namedItem(rowid).cells[indexOfColumn].removeClass("ui-state-error ui-state-error-text");
                                    //}
                                }
                                //else {
                                //    indexOfColumn = getColumnIndexByName("uomconversionvalue");
                                //    grid[0].rows.namedItem(rowid).cells[indexOfColumn].removeClass("ui-state-error ui-state-error-text");
                                //}
                            }
                            if (Grid_data[i].receivedqty != "0.00" && Grid_data[i].returnqty != "0.00") {
                                if (parseFloat(Grid_data[i].receivedqty) < parseFloat(Grid_data[i].returnqty)) {
                                    alert('Return Qty Not More than Received Qty!');
                                    IsValid = false;
                                    $('#grdgrnpo').jqGrid("setCell", i + 1, "returnqty", "", "ui-state-error ui-state-error-text");
                                }
                                //else {
                                //    debugger;
                                //    indexOfColumn = getColumnIndexByName("returnqty");
                                //    grid[0].rows.namedItem(rowid).cells[indexOfColumn].removeClass("ui-state-error ui-state-error-text");
                                //}
                            }
                        }
                    }
                    if (parseFloat(indexOfColumn) == 0) {
                        IsValid = false;
                        if (Grid_data[0].grnrate == "" || Grid_data[0].grnrate == "0.00") {
                            IsValid = false;
                            $('#grdgrnpo').jqGrid("setCell", 1, "grnrate", "", "ui-state-error ui-state-error-text");
                        }
                        if (Grid_data[0].receivedqty == "" || Grid_data[0].receivedqty == "0.000" || parseFloat(Grid_data[0].receivedqty) === 0) {
                            $('#grdgrnpo').jqGrid("setCell", 1, "receivedqty", "", "ui-state-error ui-state-error-text");
                        }
                        if (Grid_data[0].storagelocation == "" || Grid_data[0].storagelocation == "SELECT") {
                            IsValid = false;
                            $('#grdgrnpo').jqGrid("setCell", 1, "storagelocation", "", "ui-state-error ui-state-error-text");
                        }
                        if (Grid_data[0].grnuom == "" || Grid_data[0].grnuom == "SELECT") {
                            IsValid = false;
                            $('#grdgrnpo').jqGrid("setCell", 1, "grnuom", "", "ui-state-error ui-state-error-text");
                        }
                        alert('Please Enter Values in Grid!');
                    }
                    return IsValid;
                }// Grid Validation When Grn Type PO

                function POGRID(data) {
                    debugger;
                    var lastSelection;
                    var grid_data = data;
                    var grid_selector = "#grdgrnpo";
                    var pager_selector = "#gridpo-pager";
                    //grid data refresh
                    jQuery(grid_selector).jqGrid('setGridParam', { datatype: 'local', data: grid_data }).trigger("reloadGrid");
                    //resize to fit page size
                    $(window).on('resize.jqGrid', function () {
                        $(grid_selector).jqGrid('setGridWidth', $(".page-content").width());
                    })
                    //resize on sidebar collapse/expand
                    var parent_column = $(grid_selector).closest('[class*="col-"]');
                    $(document).on('settings.ace.jqGrid', function (ev, event_name, collapsed) {
                        if (event_name === 'sidebar_collapsed' || event_name === 'main_container_fixed') {
                            //setTimeout is for webkit only to give time for DOM changes and then redraw!!!
                            setTimeout(function () {
                                $(grid_selector).jqGrid('setGridWidth', parent_column.width());
                            }, 0);
                        }
                    })
                    //jQuery("#grdgrnpo").numberTemplate = {formatter: 'number', align: 'right', sorttype: 'number',
                    //    editrules: {number: true, required: true},
                    //    searchoptions: { sopt: ['eq', 'ne', 'lt', 'le', 'gt', 'ge', 'nu', 'nn', 'in', 'ni'] }};
                    jQuery(grid_selector).jqGrid({
                        data: grid_data,
                        datatype: "local",
                        height: 250,
                        rownumbers: true,
                        colModel: [
                                { label: 'Product ID', name: 'productid', width: 90 },
                                { label: 'Product Code', name: 'productcode', width: 90 },
                                { label: 'Product Name', name: 'productname', width: 108 },
                                { label: 'Product Category Id', name: 'productcategoryid', width: 90 },
                                { label: 'Category Name', name: 'categoryname', width: 90 },
                                { label: 'Product Subcategory ID', name: 'productsubcategoryid', width: 90 },
                                { label: 'Subcategory Name', name: 'subcategoryname', width: 100 },
                                { label: 'UOM', name: 'orderuom', width: 75, sortable: false },
                                {
                                    label: 'GRN UOM', name: 'grnuom', width: 90, editable: true, sortable: false, hidden: true, edittype: "select",
                                    editoptions: { value: $scope.grduoms, dataEvents: [{ type: 'change', fn: function (e) { poGriduomchange(e); } }] },
                                },
                                {
                                    label: 'UOM Con.Value', name: 'uomconversionvalue', width: '100%', editable: false, hidden: true,
                                    //formatoptions: { decimalSeparator: ".", decimalPlaces: 4, defaultValue: '0' }
                                    //editoptions: { value: $scope.grduoms },
                                    formatter: function (cellvalue, options, rowObject) {
                                        return "<select style='width: 62px;'id='" + options.rowId + "_exuom' ><option value='SELECT'>SELECT</option><option value='1' selected>1</option></select><button class='btn-grid' type='button' onclick='POGridConversionValue(" + options.rowId + ");'><i class='fa fa-plus'></i></button>";
                                    }
                                },
                                {
                                    label: 'Order Qty.', name: 'orderedqty', width: 85, sortable: false, formatter: 'number', hidden: true,
                                    formatoptions: { decimalSeparator: ".", decimalPlaces: 3, defaultValue: '0.000' }
                                },
                                {
                                    label: 'Previous Qty.', name: 'previousqty', width: 98, sortable: false, formatter: 'number', hidden: true,
                                    formatoptions: { decimalSeparator: ".", decimalPlaces: 3, defaultValue: '0.000' }
                                },
                                {
                                    label: 'Approved Qty.', name: 'receivedqty', width: 100, editable: true, formatter: 'number', sortable: false,
                                    formatoptions: { decimalSeparator: ".", decimalPlaces: 3, defaultValue: '' }
                                },
                                {
                                    label: 'Return Qty.', name: 'returnqty', width: 90, editable: true, formatter: 'number', sortable: false, hidden: true,
                                    formatoptions: { decimalSeparator: ".", decimalPlaces: 3, defaultValue: '' }
                                },
                                {
                                    label: 'PO Rate', name: 'porate', width: 90, sortable: false, align: 'right', formatter: 'number', hidden: true,
                                    formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                                },
                                {
                                    label: 'GRN Rate', name: 'grnrate', width: 90, editable: true, sortable: false, formatter: 'number', align: 'right', sortable: false,
                                    formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '' },
                                    //editoptions: { dataEvents: [{ type: 'change', fn: function (e) { POGridAmountCalculations(e); } }] },
                                },
                                  {
                                      label: 'Basic Amount', name: 'ProductBasicAmount', width: 150, editable: false, hidden: true, formatter: 'number', align: 'right',
                                      formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                                  },
                                   { label: 'Discount Type', name: 'ProductDiscountType', width: 150, hidden: true },
                     {
                         label: 'Discount', name: 'ProductDiscountFlatPercentage', width: 100, editable: false, formatter: 'number', hidden: true, align: 'right',
                         formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                     },
                      {
                          label: 'Discount Value', name: 'ProductDiscountValue', width: 100, editable: false, formatter: 'number', hidden: true, align: 'right',
                          formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                      },
                                 { label: 'Tax Type', name: 'vatorcst', width: 150, hidden: true },
                    {
                        label: 'Tax%', name: 'taxvatcst', width: 100, editable: false, formatter: 'number', hidden: true, align: 'right', edittype: "select", editoptions: { value: ["select", "0", "5", "12"], dataEvents: [{ type: 'change', fn: function (e) { editRow(e); } }] },
                        formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                    },
                    {
                        label: 'Tax Amount', name: 'TaxvatorcstAmount', width: 100, editable: false, formatter: 'number', hidden: true, align: 'right',
                        formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                    },
                      { label: 'VchTaxtype', name: 'taxtype', width: 150, hidden: true },
                    {
                        label: 'Excise%', name: 'TaxExcisePercentage', index: 'taxExcisePercentage', width: 100, editable: false, hidden: true, formatter: 'number', align: 'right',
                        formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                    },
                    {
                        label: 'Excise Amount', name: 'TaxExciseAmount', width: 100, editable: false, formatter: 'number', hidden: true, align: 'right',
                        formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                    },
                     {
                         label: 'Cess%', name: 'TaxCESSPercentage', index: 'TaxCESSPercentage', width: 100, editable: false, formatter: 'number', hidden: true, align: 'right',
                         formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                     },
                    {
                        label: 'Cess Amount', name: 'TaxCESSAmount', width: 100, editable: false, formatter: 'number', hidden: true, align: 'right',
                        formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                    },
                     {
                         label: 'Shcess%', name: 'TaxSHCESSPercentage', width: 100, editable: false, formatter: 'number', hidden: true, align: 'right',
                         formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                     },
                    {
                        label: 'Shcess Amount', name: 'TaxSHCESSAmount', width: 100, editable: false, formatter: 'number', hidden: true, align: 'right',
                        formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                    },
                       {
                           label: 'Amount', name: 'Amount', width: 90, editable: false, sortable: false, formatter: 'number', align: 'right', sortable: false,
                           formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                       },
                                { label: 'storagelocationid', name: 'storagelocationid', width: 90, hidden: true },
                                {
                                    label: 'Storage Location', name: 'storagelocation', hidden: true, width: 125,
                                    //editable: true, sortable: true, edittype: "select", editoptions:
                                    //{
                                    //    value: $scope.storagelocations,
                                    //    dataEvents: [{ type: 'change', fn: function (e) { storagelocationChange(e); } }]
                                    //}
                                },
                                { label: 'shelfid', name: 'shelfid', width: 90, hidden: true },
                                {
                                    label: 'Shelf Name', name: 'shelfname', hidden: true, width: 120,
                                    //editable: true, sortable: false,
                                    //edittype: "select", editoptions: {
                                    //value: $scope.shelfs,
                                    //dataEvents: [{ type: 'change', fn: function (e) { ShelfChange(e); } }]
                                    //}
                                }

                        ],
                        viewrecords: true,
                        closeAfterEdit: true,
                        rowNum: 1000,
                        //rowList: [8, 16, 25, 100],
                        //pager: pager_selector,
                        altRows: true,
                        search: true,
                        onSelectRow: editRow,
                        loadComplete: function (id) {
                            var table = this;
                            setTimeout(function () {
                            }, 0);
                        },
                        //caption: "Goods Received Note Details."
                        caption: "Goods Received Note Details <span class='input-icon grid-search'>  <input type='text' onkeyup='Search()'  id='globalSearchText'  placeholder='Search ...' class='nav-search-input' autocomplete='off'>  <i class='ace-icon fa fa-search nav-search-icon'></i></span> "
                    });
                    $(window).triggerHandler('resize.jqGrid');
                }  //PO Grid

                $scope.lastSelection = "";  //For last Selection Finding
                function editRow(id) {
                    var grid = $("#grdgrnpo");
                    debugger;
                    // var VatorCst = "";
                    var rowid = parseInt($("#grdgrnpo").jqGrid('getGridParam', 'selrow'));
                    var rowData = $("#grdgrnpo").getRowData(rowid);
                    // VatorCst = rowData.vatorcst;
                    // VatorCstdropdown = [];
                    //if (VatorCst == "VAT") {
                    //    VatorCstdropdown = ["0.00", "5.00", "14.50"];
                    //}
                    //else if (VatorCst == "CST") {

                    //    VatorCstdropdown = ["2.00","5.50","2.50", "12.50"];
                    //}
                    //else {
                    //    VatorCstdropdown = ["0.00"];
                    //}

                    //  $('#grdPurchaseOrder').setColProp('taxvatcst', { editoptions: { value: VatorCstdropdown, class: 'edit-select' }, editrules: { required: true, edithidden: true } });
                    grid.jqGrid('saveRow', $scope.lastSelection);

                    if ($scope.grdedit == true) {
                        grid.jqGrid("editRow", id, {
                            keys: true,
                            aftersavefunc: function (id) {
                                debugger;
                                GridCal(id);

                            }
                        });
                        $scope.lastSelection = id;
                    }
                }
                function GridCal(id) {


                    var strQuantity = $('#grdgrnpo').jqGrid("getCell", parseInt(id), "receivedqty");
                    var strEstimateRate = $('#grdgrnpo').jqGrid("getCell", id, "grnrate");
                    //var strdiscountamount = $('#grdgrnpo').jqGrid("getCell", id, "ProductDiscountValue") || 0;
                    ////-----------Taxdetails------------------//
                    //var strvatorcstpercentage = $('#grdgrnpo').jqGrid("getCell", id, "taxvatcst") || 0;
                    //var strvatorcstamount = $('#grdPurchaseOrder').jqGrid("getCell", id, "TaxvatorcstAmount") || 0;
                    //$('#grdPurchaseOrder').jqGrid("setCell", id, "TaxvatorcstAmount", "0.00");
                    //var strexcisepercentage = $('#grdPurchaseOrder').jqGrid("getCell", id, "TaxExcisePercentage") || 0;
                    //var strexciseamount = $('#grdPurchaseOrder').jqGrid("getCell", id, "TaxExciseAmount") || 0;
                    //$('#grdPurchaseOrder').jqGrid("setCell", id, "TaxExciseAmount", "0.00");
                    //var strcesspercentage = $('#grdPurchaseOrder').jqGrid("getCell", id, "TaxCESSPercentage") || 0;
                    //var strcessamount = $('#grdPurchaseOrder').jqGrid("getCell", id, "TaxCESSAmount") || 0;
                    //$('#grdPurchaseOrder').jqGrid("setCell", id, "TaxCESSAmount", "0.00");
                    //var strshcesspercentage = $('#grdPurchaseOrder').jqGrid("getCell", id, "TaxSHCESSPercentage") || 0;
                    //var strshcessamount = $('#grdPurchaseOrder').jqGrid("getCell", id, "TaxSHCESSAmount") || 0;
                    //$('#grdPurchaseOrder').jqGrid("setCell", id, "TaxSHCESSAmount", "0.00");
                    var BasicAmount = (parseFloat(strQuantity) * parseFloat(strEstimateRate));
                    var indexOfColumn;
                    if (parseFloat(strQuantity) > 0) {



                        //if (strexcisepercentage !== undefined && strexcisepercentage != 0.00) {
                        //    strexciseamount = (parseFloat(BasicAmount)) * (parseFloat(strexcisepercentage) / 100);
                        //    $('#grdPurchaseOrder').jqGrid("setCell", id, "TaxExciseAmount", strexciseamount);
                        //    //$scope.GD.TaxExciseAmount = Math.round(parseFloat(strTaxExciseAmount) * 100) / 100;
                        //}

                        //if (strexcisepercentage !== 0.00) {
                        //    strcessamount = parseFloat(strexciseamount) * (parseFloat(strcesspercentage) / 100);
                        //    $('#grdPurchaseOrder').jqGrid("setCell", id, "TaxCESSAmount", strcessamount);
                        //    // $scope.GD.TaxCESSAmount = Math.round(parseFloat(strcessamount) * 100) / 100;
                        //}
                        //if (strcesspercentage !== 0.00) {
                        //    strshcessamount = parseFloat(strexciseamount) * (parseFloat(strshcesspercentage) / 100);
                        //    $('#grdPurchaseOrder').jqGrid("setCell", id, "TaxSHCESSAmount", strshcessamount);
                        //    // $scope.GD.TaxSHCESSAmount = Math.round(parseFloat(strTaxSHCESSAmount) * 100) / 100;
                        //}
                        //if (strvatorcstpercentage !== 0.00) {
                        //    strTaxvatorcstAmount = (parseFloat(BasicAmount)) * parseFloat(strvatorcstpercentage) / 100;
                        //    $('#grdPurchaseOrder').jqGrid("setCell", id, "TaxvatorcstAmount", strTaxvatorcstAmount);
                        //    //$scope.GD.TaxvatorcstAmount = Math.round(parseFloat(strTaxvatorcstAmount) * 100) / 100;
                        //}
                        BasicCalculations();





                        //if (strQuantity === "0.000" || strQuantity === "" || parseFloat(strQuantity) == 0) {
                        //    $('#grdPurchaseOrder').jqGrid("setCell", id, "receivedqty", "", "ui-state-error ui-state-error-text");
                        //}
                        //else {
                        //    // reomove
                        //    indexOfColumn = getColumnIndexByName("receivedqty");
                        //    $(this.rows.namedItem(id).cells[indexOfColumn]).removeClass("ui-state-error ui-state-error-text");
                        //}
                        //if (strEstimateRate === "0.00" || strEstimateRate === "" || strEstimateRate === "0" || parseFloat(strEstimateRate) == 0) {
                        //    $('#grdPurchaseOrder').jqGrid("setCell", id, "EstimateRate", "", "ui-state-error ui-state-error-text");
                        //}
                        //else {
                        //    // reomove
                        //    indexOfColumn = getColumnIndexByName("grnrate");
                        //    $(this.rows.namedItem(id).cells[indexOfColumn]).removeClass("ui-state-error ui-state-error-text");
                        //}
                        if (parseFloat(strQuantity) > 0 && parseFloat(strEstimateRate) > 0) {
                            //indexOfColumn = getColumnIndexByName("grnrate");
                            //$(this).jqGrid("setCell", id, "grnrate", "", "ui-state-error ui-state-error-text");
                            // first change the cell in the visible part of grid
                            //myGrid.jqGrid('setCell', id, 'Amount', (parseFloat(strQuantity) * parseFloat(strEstimateRate)));
                            // now change the internal local data
                            //myGrid.jqGrid('getLocalRow', id).Amount = (parseFloat(strQuantity) * parseFloat(strEstimateRate));
                            //  var taxamount = parseFloat(strTaxvatorcstAmount) + parseFloat(strshcessamount) + parseFloat(strcessamount) + parseFloat(strexciseamount);
                            var amount = (parseFloat(strQuantity) * parseFloat(strEstimateRate));
                            $('#grdgrnpo').jqGrid('setCell', id, 'Amount', amount);
                            //var productbasicamount = (parseFloat(strQuantity) * parseFloat(strEstimateRate));
                            //$('#grdPurchaseOrder').jqGrid('setCell', id, 'ProductBasicAmount', productbasicamount);
                        } else {
                            $('#grdgrnpo').jqGrid('setCell', id, 'Amount', 0);
                            $('#grdgrnpo').jqGrid('setCell', id, 'ProductBasicAmount', 0);
                        }
                    }
                    BasicCalculations();
                    $scope.DiscountCalculations();
                    $scope.TotalCalculations();

                    $scope.$apply();
                }
                //function editRow(id) {
                //    var grid = $("#grdgrnpo");
                //    debugger;
                //    grid.jqGrid('saveRow', $scope.lastSelection);
                //    var lstqty = grid.jqGrid("getCell", $scope.lastSelection, "receivedqty");
                //    var lstgrnrate = grid.jqGrid("getCell", $scope.lastSelection, "grnrate");
                //    var strprdtamount = grid.jqGrid("getCell", $scope.lastSelection, "Amount");
                //    // $scope.GD.productamount = strprdtamount;
                //    //if (parseFloat(lstqty) !== "" && parseFloat(lstgrnrate) != "" && parseFloat(lstqty) > 0 && parseFloat(lstgrnrate) > 0) {
                //    //    var stramount = parseFloat(lstqty) * parseFloat(lstgrnrate);
                //    //    //indexOfColumn = getColumnIndexByName("returnqty");
                //    //    grid.jqGrid('setCell', $scope.lastSelection, 'Amount', stramount);
                //    //    //$(this).jqGrid("setCell", i + 1, "Amount", stramount);
                //    //}
                //    //var Grid_data = $('#grdgrnpo').jqGrid('getRowData', $scope.lastSelection);
                //    //grid.jqGrid('editRow', id, { keys: true });
                //    $scope.lastSelection = id;
                //  //  BasicCalculationsModify();
                //    BasicCalculations();
                //    $scope.DiscountCalculations();
                //    // $scope.ExiseCalculations();
                //    //$scope.VatorCstCalculations();
                //    $scope.$apply();

                //    grid.jqGrid("editRow", id, {
                //        keys: true,
                //        aftersavefunc: function (id) {
                //            debugger;


                //            var receivedqty = $(this).jqGrid("getCell", id, "receivedqty");

                //            // var returnqty = $(this).jqGrid("getCell", id, "returnqty");
                //            //   var grnuom = $(this).jqGrid("getCell", id, "grnuom");
                //            var grnrate = $(this).jqGrid("getCell", id, "grnrate");
                //            //   var storagelocation = $(this).jqGrid("getCell", id, "storagelocation");
                //            //   var orderuom = $(this).jqGrid("getCell", id, "orderuom");
                //            //    var uomconversionvalue = $(this).jqGrid("getCell", id, "uomconversionvalue");
                //            //-----------Taxdetails------------------//
                //            //   var strvatorcstpercentage = $(this).jqGrid("getCell", id, "taxvatcst") || 0;
                //            //   var strvatorcstamount = $(this).jqGrid("getCell", id, "TaxvatorcstAmount") || 0;
                //            //   $(this).jqGrid("setCell", id, "TaxvatorcstAmount", "0.00");
                //            //   var strexcisepercentage = $(this).jqGrid("getCell", id, "TaxExcisePercentage") || 0;
                //            //   var strexciseamount = $(this).jqGrid("getCell", id, "TaxExciseAmount") || 0;
                //            //$(this).jqGrid("setCell", id, "TaxExciseAmount", "0.00");
                //            //var strcesspercentage = $(this).jqGrid("getCell", id, "TaxCESSPercentage") || 0;
                //            //var strcessamount = $(this).jqGrid("getCell", id, "TaxCESSAmount");
                //            //$(this).jqGrid("setCell", id, "TaxCESSAmount", "0.00");
                //            //var strshcesspercentage = $(this).jqGrid("getCell", id, "TaxSHCESSPercentage") || 0;
                //            //var strshcessamount = $(this).jqGrid("getCell", id, "TaxSHCESSAmount");
                //            //var strdiscontamount = $(this).jqGrid("getCell", id, "ProductDiscountValue") || 0;
                //            //$(this).jqGrid("setCell", id, "TaxSHCESSAmount", "0.00");

                //            //var indexOfColumn;
                //            //if (parseFloat(receivedqty) > 0) {

                //            //    if (strexcisepercentage !== undefined && strexcisepercentage != 0.00) {
                //            //        strexciseamount = (parseFloat(BasicAmount) - parseFloat(strdiscontamount)) * (parseFloat(strexcisepercentage) / 100);
                //            //        $(this).jqGrid("setCell", id, "TaxExciseAmount", strexciseamount);
                //            //        //$scope.GD.TaxExciseAmount = Math.round(parseFloat(strTaxExciseAmount) * 100) / 100;
                //            //    }

                //            //    if (strexcisepercentage != 0.00) {
                //            //        strcessamount = parseFloat(strexciseamount) * (parseFloat(strcesspercentage) / 100);
                //            //        $(this).jqGrid("setCell", id, "TaxCESSAmount", strcessamount);
                //            //        // $scope.GD.TaxCESSAmount = Math.round(parseFloat(strcessamount) * 100) / 100;
                //            //    }
                //            //    if (strcesspercentage != 0.00) {
                //            //        strshcessamount = parseFloat(strexciseamount) * (parseFloat(strshcesspercentage) / 100);
                //            //        $(this).jqGrid("setCell", id, "TaxSHCESSAmount", strshcessamount);
                //            //        // $scope.GD.TaxSHCESSAmount = Math.round(parseFloat(strTaxSHCESSAmount) * 100) / 100;
                //            //    }
                //            //    if (strvatorcstpercentage != 0.00) {
                //            //        strTaxvatorcstAmount = (parseFloat(BasicAmount) - parseFloat(strdiscontamount)) * parseFloat(strvatorcstpercentage) / 100;
                //            //        $(this).jqGrid("setCell", id, "TaxvatorcstAmount", strTaxvatorcstAmount);
                //            //        //$scope.GD.TaxvatorcstAmount = Math.round(parseFloat(strTaxvatorcstAmount) * 100) / 100;
                //            //    }
                //            // BasicCalculations();

                //            //if (receivedqty === "0.000" || receivedqty === "" || parseFloat(receivedqty) == 0) {
                //            //    $(this).jqGrid("setCell", id, "receivedqty", "", "ui-state-error ui-state-error-text");
                //            //} else {
                //            //    // reomove
                //            //    indexOfColumn = getColumnIndexByName("receivedqty");
                //            //    $(this.rows.namedItem(id).cells[indexOfColumn]).removeClass("ui-state-error ui-state-error-text");
                //            //}
                //            //if (grnuom === "" || grnuom === "SELECT") {
                //            //    $(this).jqGrid("setCell", id, "grnuom", "", "ui-state-error ui-state-error-text");
                //            //} else {
                //            //    // reomove
                //            //    indexOfColumn = getColumnIndexByName("grnuom");
                //            //    $(this.rows.namedItem(id).cells[indexOfColumn]).removeClass("ui-state-error ui-state-error-text");
                //            //}
                //            //if (grnrate === "0.00" || grnrate === "" || grnrate === "0") {
                //            //    $(this).jqGrid("setCell", id, "grnrate", "", "ui-state-error ui-state-error-text");
                //            //} else {
                //            //    // reomove
                //            //    indexOfColumn = getColumnIndexByName("grnrate");
                //            //    $(this.rows.namedItem(id).cells[indexOfColumn]).removeClass("ui-state-error ui-state-error-text");
                //            //}
                //            //if (storagelocation === "0" || storagelocation === "SELECT") {
                //            //    $(this).jqGrid("setCell", id, "storagelocation", "", "ui-state-error ui-state-error-text");
                //            //} else {
                //            //    // reomove
                //            //    indexOfColumn = getColumnIndexByName("storagelocation");
                //            //    $(this.rows.namedItem(id).cells[indexOfColumn]).removeClass("ui-state-error ui-state-error-text");
                //            //}
                //            //if (orderuom !== "" && grnuom !== "") {
                //            //    if (grnuom !== orderuom) {
                //            //        if (uomconversionvalue === "0.0000" || parseFloat(uomconversionvalue) == 0) {
                //            //            $(this).jqGrid("setCell", id, "uomconversionvalue", "", "ui-state-error ui-state-error-text");
                //            //        } else {
                //            //            debugger;
                //            //            // reomove
                //            //            indexOfColumn = getColumnIndexByName("uomconversionvalue");
                //            //            $(this.rows.namedItem(id).cells[indexOfColumn]).removeClass("ui-state-error ui-state-error-text");
                //            //        }
                //            //    } else {
                //            //        debugger;
                //            //        // reomove
                //            //        indexOfColumn = getColumnIndexByName("uomconversionvalue");
                //            //        $(this.rows.namedItem(id).cells[indexOfColumn]).removeClass("ui-state-error ui-state-error-text");
                //            //    }
                //            //}
                //            //if (receivedqty !== "" && returnqty != "") {
                //            //    if (parseFloat(receivedqty) < parseFloat(returnqty)) {
                //            //        $(this).jqGrid("setCell", id, "returnqty", "", "ui-state-error ui-state-error-text");
                //            //    } else {
                //            //        // reomove
                //            //        indexOfColumn = getColumnIndexByName("returnqty");
                //            //        $(this.rows.namedItem(id).cells[indexOfColumn]).removeClass("ui-state-error ui-state-error-text");
                //            //    }
                //            //}
                //            if (receivedqty !== "" && grnrate != "") {

                //                //var strvatorcstamount1 = $(this).jqGrid("getCell", id, "TaxvatorcstAmount") || 0;
                //                //var strexciseamount1 = $(this).jqGrid("getCell", id, "TaxExciseAmount") || 0;
                //                //var strcessamount1 = $(this).jqGrid("getCell", id, "TaxCESSAmount");
                //                //var strshcessamount1 = $(this).jqGrid("getCell", id, "TaxSHCESSAmount");
                //                //var strdiscontamount1 = $(this).jqGrid("getCell", id, "ProductDiscountValue") || 0;

                //                //var taxamount = parseFloat(strvatorcstamount1) + parseFloat(strshcessamount1) + parseFloat(strcessamount1) + parseFloat(strexciseamount1);
                //                // var stramount = (parseFloat(receivedqty) * parseFloat(grnrate)) + parseFloat(taxamount) - parseFloat(strdiscontamount1);
                //                var stramount = parseFloat(receivedqty) * parseFloat(grnrate);
                //                //indexOfColumn = getColumnIndexByName("returnqty");
                //                grid.jqGrid('setCell', id, 'Amount', stramount);

                //            }


                //            BasicCalculations();

                //            BasicCalculationsModify();
                //            $scope.DiscountCalculations();

                //            $scope.$apply();
                //        }
                //    });
                //}

                //     Changing Edit Mode When Select on Grid Row In GRN Type PO

                CheckGrid = function () {
                    var IsExists = true;
                    var rowdata = jQuery('#grdgrndirect').jqGrid('getRowData');
                    var len = rowdata.length;
                    for (var i = 0; i < len; i++) {
                        var Productid = $scope.GD.productid;
                        if (parseInt(rowdata[i].productid) == Productid) {
                            IsExists = false;
                        }
                    }
                    return IsExists;
                }//    Checking Product Exist or not in Direct GRN Grid

                $scope.AddProduct = function (GD) {
                    debugger;
                    $scope.submittedAdd = true;
                    var isValid = true;
                    var prdtamount = $scope.GD.productamount;

                    if (isValid) {
                        if (CheckGrid()) {

                            if ($scope.isAddFormValid) {
                                if (prdtamount > 0) {
                                    if (GD.receivedqty !== undefined && GD.returnqty !== undefined && GD.returnqty !== null && GD.returnqty !== "") {
                                        if (parseFloat(GD.receivedqty) < parseFloat(GD.returnqty)) {
                                            alert('Return Qty Not More than Received Qty!');
                                            isValid = false;
                                        }
                                    }
                                    if (GD.grnrate === undefined || GD.grnrate === undefined || GD.grnrate === null || GD.grnrate === "" || parseFloat(GD.grnrate) == 0) {
                                        alert('Rate Should Not be Empty!');
                                        isValid = false;
                                    }
                                    var strUOM = $("#UOM option:selected").text();
                                    if (strUOM != "SELECT UOM" && strUOM != "") {
                                        GD.grnuom = strUOM;
                                    }
                                    if (GD.shelfid !== '' && GD.shelfid !== undefined && GD.shelfid !== null) {
                                        var Shelf = $("#shelfid option:selected").text();
                                        if (Shelf !== "SELECT SHELF" && Shelf !== "") {
                                            GD.shelfname = Shelf;
                                        }
                                    }
                                    var ans = confirm("Are You Sure? Do You Want To Add Details to Grid?");
                                    if (ans) {
                                        debugger;
                                        GD.uomconversionvalue = $("#uomconversionvalue option:selected").text();
                                        var strdiscountamount = 0;
                                        var strvatorcst = 0;
                                        var strexcise = 0;
                                        var strcess = 0;
                                        var strshcess = 0;
                                        if ($scope.GD.ProductDiscountValue != undefined) {
                                            strdiscountamount = $scope.GD.ProductDiscountValue || 0;
                                        }
                                        if ($scope.GD.TaxvatorcstAmount != undefined) {
                                            strvatorcst = $scope.GD.TaxvatorcstAmount || 0;
                                        }
                                        if ($scope.GD.TaxExciseAmount != undefined) {
                                            strexcise = $scope.GD.TaxExciseAmount || 0;
                                        }
                                        if ($scope.GD.TaxCESSAmount != undefined) {
                                            strcess = $scope.GD.TaxCESSAmount || 0;
                                        }
                                        if ($scope.GD.TaxSHCESSAmount != undefined) {
                                            strshcess = $scope.GD.TaxSHCESSAmount || 0;
                                        }
                                        GD.ProductBasicAmount = parseFloat(GD.grnrate) * parseFloat(GD.receivedqty);
                                        GD.Amount = (parseFloat(GD.grnrate) * parseFloat(GD.receivedqty)) - parseFloat(strdiscountamount) + parseFloat(strvatorcst) + parseFloat(strexcise) + parseFloat(strcess) + parseFloat(strshcess);;
                                        var newrowid = 1;
                                        if (jQuery("#grdgrndirect").jqGrid('getRowData').length > 0) {
                                            var rids = $('#grdgrndirect').jqGrid('getDataIDs');
                                            var result = [];
                                            for (var i = 0, l = rids.length; i < l; i++) result.push(+rids[i]);
                                            newrowid = Math.max.apply(Math, result) + 1;
                                        }
                                        $('#grdgrndirect').jqGrid("addRowData", newrowid, GD, "last");
                                        BasicCalculations();
                                        $scope.DiscountCalculations();
                                        $scope.ExiseCalculations();
                                        $scope.VatorCstCalculations();
                                        ClearDirectGRN();
                                        //$('#shelfid').find('option').remove();
                                        //$('#shelfid').find('option').remove();
                                        $scope.storageareas = [];
                                        $scope.shelfnames = [];
                                        $("#productid").focus();
                                        $scope.Producthddiscount = false;
                                        $scope.taxtypeChange();

                                    }
                                } else {
                                    alert("Please Check the Values!");
                                }
                            }

                        } else {
                            alert('Product Already Added to Grid!');
                            $scope.submittedAdd = false;
                            ClearDirectGRN();
                            $scope.taxtypeChange();
                        }
                    }

                };//ADD Method When Adding Products to Grid when Type DIRECT

                getColumnIndexByName = function (columnName) {
                    var cm = $("#grdgrnpo").jqGrid("getGridParam", "colModel"), i, l = cm.length;
                    for (i = 0; i < l; i++) {
                        if (cm[i].name === columnName) {
                            return i; // return the index
                        }
                    }
                    return -1;
                }; //Finding Column Index of Grid Column When Type PO

                function DirectMRNGRID(data) {
                    debugger;
                    var lastSelection;
                    var grid_data = data;
                    var grid_selector = "#grdgrndirect";
                    //var pager_selector = "#griddirect-pager";
                    //grid data refresh
                    jQuery(grid_selector).jqGrid('setGridParam', { datatype: 'local', data: grid_data }).trigger("reloadGrid");
                    //resize to fit page size
                    $(window).on('resize.jqGrid', function () {
                        $(grid_selector).jqGrid('setGridWidth', $(".page-content").width());
                    })
                    //resize on sidebar collapse/expand
                    var parent_column = $(grid_selector).closest('[class*="col-"]');
                    $(document).on('settings.ace.jqGrid', function (ev, event_name, collapsed) {
                        if (event_name === 'sidebar_collapsed' || event_name === 'main_container_fixed') {
                            //setTimeout is for webkit only to give time for DOM changes and then redraw!!!
                            setTimeout(function () {
                                $(grid_selector).jqGrid('setGridWidth', parent_column.width());
                            }, 0);
                        }
                    })
                    //jQuery("#grdgrnpo").numberTemplate = {formatter: 'number', align: 'right', sorttype: 'number',
                    //    editrules: {number: true, required: true},
                    //    searchoptions: { sopt: ['eq', 'ne', 'lt', 'le', 'gt', 'ge', 'nu', 'nn', 'in', 'ni'] }};
                    jQuery(grid_selector).jqGrid({
                        data: grid_data,
                        datatype: "local",
                        height: 250,
                        rownumbers: true,
                        colModel: [
                                {
                                    label: 'Action', width: 80, sortable: false, editable: false, key: true, formatter: function (cellvalue, options, rowObject) {
                                        return "<button class='btn-grid' type='button' onclick='Delete(" + options.rowId + ")'  ><i class='fa fa-trash'></i></button>";
                                    }
                                },
                                { label: 'Product ID', name: 'productid', width: 90 },
                                { label: 'Product Code', name: 'productcode', width: 90 },
                                { label: 'Product Name', name: 'productname', width: 150 },
                                { label: 'Product Category ID', name: 'productcategoryid', width: 90 },
                                { label: 'Category Name', name: 'categoryname', width: 90 },
                                { label: 'Product Subcategory ID', name: 'productsubcategoryid', width: 90 },
                                { label: 'Subcategory Name', name: 'subcategoryname', width: 100 },
                                { label: 'UOM', name: 'orderuom', width: 100, sortable: false },
                                //{
                                //    label: 'GRN UOM', name: 'grnuom', width: 100, editable: false, sortable: false, hidden: true, edittype: "select", editoptions: { value: $scope.grduoms },
                                //},
                                //{
                                //    label: 'UOM Con.Value', name: 'uomconversionvalue', width: 120, editable: false, hidden: true, sortable: false, formatter: 'number', align: 'right',
                                //    formatoptions: { decimalSeparator: ".", decimalPlaces: 4, defaultValue: '0.0000' }
                                //},
                                {
                                    label: 'Approved Qty.', name: 'receivedqty', width: 150, editable: false, formatter: 'number', sortable: false,
                                    formatoptions: { decimalSeparator: ".", decimalPlaces: 3, defaultValue: '0.000' }
                                },
                                //{
                                //    label: 'Return Qty.', name: 'returnqty', width: 150, editable: false, formatter: 'number', sortable: false, hidden: true,
                                //    formatoptions: { decimalSeparator: ".", decimalPlaces: 3, defaultValue: '0.000' }
                                //},
                                {
                                    label: 'GRN Rate', name: 'grnrate', width: 150, editable: false, sortable: false, formatter: 'number', align: 'right',
                                    formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '' }
                                },
                                  {
                                      label: 'Basic Amount', name: 'ProductBasicAmount', width: 150, editable: false, formatter: 'number', hidden: true, align: 'right',
                                      formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                                  },
                                   { label: 'Discount Type', name: 'ProductDiscountType', width: 150, hidden: true },
                     {
                         label: 'Discount', name: 'ProductDiscountFlatPercentage', width: 150, editable: false, formatter: 'number', hidden: true, align: 'right',
                         formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                     },
                      {
                          label: 'Discount Value', name: 'ProductDiscountValue', width: 150, editable: false, formatter: 'number', hidden: true, align: 'right',
                          formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                      },
                    { label: 'Taxtype', name: 'vatorcst', width: 150, hidden: true },
                    {
                        label: 'Tax%', name: 'taxvatcst', width: 150, editable: false, formatter: 'number', hidden: true, align: 'right',
                        formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                    },
                    {
                        label: 'Tax Amount', name: 'TaxvatorcstAmount', width: 150, editable: false, formatter: 'number', hidden: true, align: 'right',
                        formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                    },
                    {
                        label: 'Excise%', name: 'TaxExcisePercentage', index: 'TaxExcisePercentage', width: 100, editable: false, formatter: 'number', hidden: true, align: 'right',
                        formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                    },
                    {
                        label: 'Excise Amount', name: 'TaxExciseAmount', width: 150, editable: false, formatter: 'number', align: 'right', hidden: true,
                        formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                    },
                     {
                         label: 'Cess%', name: 'TaxCESSPercentage', index: 'TaxCESSPercentage', width: 150, editable: false, formatter: 'number', hidden: true, align: 'right',
                         formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                     },
                    {
                        label: 'Cess Amount', name: 'TaxCESSAmount', width: 150, editable: false, formatter: 'number', hidden: true, align: 'right',
                        formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                    },
                     {
                         label: 'Shcess%', name: 'TaxSHCESSPercentage', width: 150, editable: false, formatter: 'number', hidden: true, align: 'right',
                         formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                     },
                    {
                        label: 'Shess Amount', name: 'TaxSHCESSAmount', width: 150, editable: false, formatter: 'number', hidden: true, align: 'right',
                        formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                    },
                       {
                           label: 'Amount', name: 'Amount', width: 150, editable: false, sortable: false, formatter: 'number', align: 'right', sortable: false,
                           formatoptions: { decimalSeparator: ".", decimalPlaces: 2, defaultValue: '0.00' }
                       }
                                //{ label: 'storagelocationid', name: 'storagelocationid', width: 90, hidden: true },
                                //{
                                //    label: 'Storage Location', name: 'storagelocation', editable: false,hidden: true, sortable: true
                                //},
                                //{ label: 'shelfid', name: 'shelfid', width: 90, hidden: true },
                                //{ label: 'Shelf Name', name: 'shelfname', editable: false,hidden: true, sortable: false }
                        ],
                        viewrecords: true,
                        //rowNum: 8,
                        //rowList: [8, 16, 25, 100],
                        //pager: pager_selector,
                        altRows: true,
                        search: true,
                        loadComplete: function (id) {
                            var table = this;
                            setTimeout(function () {
                            }, 0);
                        },
                        //caption: "Goods Received Note Details."
                        caption: "Goods Received Note Details <span class='input-icon grid-search'>  <input type='text' onkeyup='Search()'  id='globalSearchText1'  placeholder='Search ...' class='nav-search-input' autocomplete='off'>  <i class='ace-icon fa fa-search nav-search-icon'></i></span> "
                    });
                    $(window).triggerHandler('resize.jqGrid');
                }   //DIRECT GRN Grid
            });
        </script>
